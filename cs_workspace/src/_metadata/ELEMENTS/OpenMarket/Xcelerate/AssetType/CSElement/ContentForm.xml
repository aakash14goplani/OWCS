<?xml version="1.0" ?>
<!DOCTYPE FTCS SYSTEM "futuretense_cs.dtd">
<FTCS Version="1.1">
<!--
$Logfile: /VerticalApps/XcelerateD/install/Xcelerate/Populate/ElementCatalog/OpenMarket/Xcelerate/AssetType/CSElement/ContentForm.xml $
$Revision: 28 $
$Modtime: 7/29/04 2:46p $
-->

<!--
- Confidential and Proprietary Information of divine,inc.
-					All Rights Reserved.
-
- DESCRIPTION
-
-    Note: you must
-    ensure that there is no more than one
-    occurence of a form field that refers
-    to one of these input fields. Else, browsers
-    will concatenate all values found, surely
-    leading to unexpected results
-
-    Note: dates are dealt with a little differently

- HISTORY 
	5/18/00 - Convert to standard UI layout - Jeff Sokolov

    [2007-09-10 KG]
    * added XSS scripting fixes (adapted from 6.3 fixes); search for isCleanString
    * changed definitions of 'obj' to just forms[0] (not .elements[0])
    [2007-10-09 KG] XSS revision:
    * changed locale string used for isclean error alert
    * added & to list of characters checked (jeez, how'd I miss that?)
-->
<div dojoType="dijit.layout.BorderContainer" class="bordercontainer">
<CALLELEMENT NAME="OpenMarket/Xcelerate/Scripts/ValidateInputForXSS" />
<SCRIPT LANGUAGE="JavaScript">

<![CDATA[

var obj = document.forms[0];

function getAssetName()
{
	return obj.elements['CSElement:name'].value;
}

function submitForm()
{
	return checkfields();
}

function isblank(s) {
	for(var i=0;i<s.length;i++){
		var c = s.charAt(i);
		if( (c!=' ') && (c != '\n') && ( c!='\t') && (c!='\r') ) 
			return false;
	}
	return true;
}
function checkfields() {
      
	var obj = document.forms[0];
	
	var csElementName=obj.elements['CSElement:name'];
	if (isblank(csElementName.value)) {
	      ]]>
	      alert("<XLAT.STREAM KEY="dvin/UI/Error/specifyanameforthisElement" ESCAPE="true" ENCODE="false"/>");
	      <![CDATA[
		return false;
	}
	var isclean = isCleanString(csElementName.value, '#=&');
	if (!isclean) {
		var replacestr=/\bVariables.name\b/ ;
        var xlatstr= ']]><XLAT.STREAM KEY="dvin/AT/Common/Invalidcharacterinname2" ENCODE="false" ESCAPE="true"/><![CDATA[' ;
        alert(xlatstr.replace(replacestr, csElementName.value));
		csElementName.focus();
		return false;
	}
	/* old code:
 	if (csElementName.value.search(/['"?;:#&=]/) != -1){
        var replacestr=/\bVariables.name\b/ ;
        var xlatstr= ']]><XLAT.STREAM KEY="dvin/AT/Common/Invalidcharacterinname2" ENCODE="false" ESCAPE="true"/><![CDATA[' ;
        alert(xlatstr.replace(replacestr, csElementName.value));
		return false;
	}
	*/
	var sroot = obj.elements['CSElement:rootelement'];
	if ( isblank(sroot.value) ){
		var rootelement = csElementName.value;
		rootelement = rootelement.replace( / /g, '_' );
		sroot.value = rootelement;
	}
	/*should we replace this with isCleanString too?*/
 	if (sroot.value.search(/['"?;:#&=]/) != -1)
	{
		 var replacestr=/\bVariables.name\b/ ;
         var xlatstr= ']]><XLAT.STREAM KEY="dvin/AT/Common/Invalidcharacterinname2" ENCODE="false" ESCAPE="true"/><![CDATA[' ;
         alert(xlatstr.replace(replacestr,obj.elements['CSElement:rootelement'].value));
		return false;
	}
	if(!checkforfilename()) return false;
	var TotalElement=obj.elements['CSElement:Mapping:Total'];
	var i, j;
	if ( TotalElement != null )
	{
	   total = TotalElement.value;
	   for ( i = 0; i < total; i ++ )
	   {
	      for ( j = 1+i; j < total; j ++ )
	      {
	         var ikey = 'CSElement:Mapping:' + i + ':key';
	         var jkey = 'CSElement:Mapping:' + j + ':key';
	         var ivalue = obj.elements[ ikey ].value;
	         var jvalue = obj.elements[ jkey ].value;
	         var iskey = 'CSElement:Mapping:' + i + ':siteid';
	         var jskey = 'CSElement:Mapping:' + j + ':siteid';
	         var isvalue = obj.elements[ iskey ].value;
	         var jsvalue = obj.elements[ jskey ].value;
	         if ( !isblank(ivalue) && !isblank(jvalue) && ivalue == jvalue && !isblank(isvalue) && !isblank(jsvalue) && isvalue == jsvalue )
	         {
               ]]>
      	      alert("<XLAT.STREAM KEY="dvin/UI/Error/UniqueKeyViolation" ESCAPE="true" ENCODE="false"/>");
      	      <![CDATA[
	            return false;
	         }
	      } 
	   }
	}
	obj.submit();
	return false;
}


function SetCancelFlag () {
	var obj = document.forms[0];

	if(confirm("]]><XLAT.STREAM KEY="dvin/Common/CancelClicked" ESCAPE="true" ENCODE="false"/><![CDATA[")){
		obj.elements['upcommand'].value="cancel";
		obj.submit();
		return false;
	}
}

function Fixpagename(ourPage,nextstep)
{
	var obj = document.forms[0];
	
	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;
	obj.pagename.value = newpage;
	
	obj.NextStep.value = nextstep;

	obj.submit();
	return false;
}

function FixpagenameWithCheck(ourPage,nextstep)
{
	var obj = document.forms[0];
	var csElementName=obj.elements['CSElement:name'];
	if ( isblank(csElementName.value)) {
	      ]]>
	      alert("<XLAT.STREAM KEY="dvin/UI/Error/specifyanameforthisElement" ESCAPE="true" ENCODE="false"/>");
	      <![CDATA[
		return false;
	}
	var isclean = isCleanString(csElementName.value, '#=&');
	if (!isclean) {
		var replacestr=/\bVariables.name\b/ ;
        var xlatstr= ']]><XLAT.STREAM KEY="dvin/AT/Common/Invalidcharacterinname2" ENCODE="false" ESCAPE="true"/><![CDATA[' ;
        alert(xlatstr.replace(replacestr, csElementName.value));
		csElementName.focus();
		return false;
	}
	/* old: why isn't this checking for # & and = also? inconsistent update?
 	if (csElementName.value.search(/['"?;:]/) != -1){
        var replacestr=/\bVariables.name\b/ ;
        var xlatstr= ']]><XLAT.STREAM KEY="dvin/AT/Common/Invalidcharacterinname" ENCODE="false" ESCAPE="true"/><![CDATA[' ;
        alert(xlatstr.replace(replacestr, csElementName.value));
		return false;
	}
	*/
	var TotalElement=obj.elements['CSElement:Mapping:Total'];
	var i, j;
	if ( TotalElement != null )
	{
	   total = TotalElement.value;
	   for ( i = 0; i < total; i ++ )
	   {
	      for ( j = 1+i; j < total; j ++ )
	      {
	         var ikey = 'CSElement:Mapping:' + i + ':key';
	         var jkey = 'CSElement:Mapping:' + j + ':key';
	         var ivalue = obj.elements[ ikey ].value;
	         var jvalue = obj.elements[ jkey ].value;
	         var iskey = 'CSElement:Mapping:' + i + ':siteid';
	         var jskey = 'CSElement:Mapping:' + j + ':siteid';
	         var isvalue = obj.elements[ iskey ].value;
	         var jsvalue = obj.elements[ jskey ].value;
	         if ( !isblank(ivalue) && !isblank(jvalue) && ivalue == jvalue && !isblank(isvalue) && !isblank(jsvalue) && isvalue == jsvalue )
	         {
               ]]>
      	      alert("<XLAT.STREAM KEY="dvin/UI/Error/UniqueKeyViolation" ESCAPE="true" ENCODE="false"/>");
      	      <![CDATA[
	            return false;
	         }
	      } 
	   }
	}

	var sroot = obj.elements['CSElement:rootelement'];
	if ( isblank(sroot.value) ){
		sroot.value = csElementName.value;
	}

	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;
	obj.pagename.value = newpage;
	
	obj.NextStep.value = nextstep;

	obj.submit();
	return false;
}

function checkforfilename()
{
	var obj = document.forms[0].elements[0];
	var url =obj.form.elements['CSElement:url'].value;
	var urlspec = document.forms[0].elements['CSElement:urlspec'].value;	
	if(isblank(urlspec)){
		]]>
		alert("<XLAT.STREAM KEY="dvin/AT/Common/SpecifyFilenameForElementLogic" ESCAPE="true" ENCODE="false"/>");
		<![CDATA[
		return false;
	}
	else{
		if ( urlspec.search(/['"?;:]/) != -1) {
			var replacestr=/\bVariables.filename\b/ ;
		  var xlatstr= ']]><XLAT.STREAM KEY="dvin/AT/Template/FilenameContainsIllegalCharacters" ENCODE="false" ESCAPE="true"/><![CDATA[' ;
		  alert(xlatstr.replace(replacestr,urlspec));
			return false;
		}
		else if ( urlspec.indexOf(".") == -1 ) {
			var replacestr=/\bVariables.filename\b/ ;
		  var xlatstr= ']]><XLAT.STREAM KEY="dvin/AT/Template/FilenameHasNoExtension" ENCODE="false" ESCAPE="true"/><![CDATA[' ;
		  alert(xlatstr.replace(replacestr,urlspec));
			return false;
		}
	}
	if(isblank(url)){
		]]>
		alert( "<XLAT.STREAM KEY="dvin/AT/Template/specifyelementlogic" ESCAPE="true" ENCODE="false"/>" );
		<![CDATA[
		return false;
	}
	return true;
}
]]>
</SCRIPT>

<INPUT TYPE="HIDDEN" NAME="NextStep" VALUE=""/>
<INPUT TYPE="hidden" NAME="upcommand" VALUE="submit"/>

<USERISMEMBER GROUP="ElementEditor"/>
<if COND="Variables.errno=0">
<then>
	<ASSET.GETASSETTYPE NAME="Variables.assetname" OUTNAME="at"/>
	<ASSETTYPE.GET NAME="at" FIELD="description" OUTPUT="at:description"/>
	<setvar NAME="doproceed" VALUE="WrongACLToEditAsset"/>
</then>
</if>
<setvar NAME="errno" VALUE="0"/>

<if COND="Variables.doproceed=true">
<then>

	<IF COND="IsVariable.NextStep!=true">
		<THEN>
			<SETVAR NAME="NextStep" VALUE="ContentFormName"/>
		</THEN>
	</IF>
	
	<!-- form buttons -->
	<CALLELEMENT NAME="OpenMarket/Xcelerate/UIFramework/Util/ToolBar">
		<ARGUMENT NAME="doNotShowSaveButton" VALUE="false"/>
	</CALLELEMENT>	
	<div dojoType="dijit.layout.ContentPane" region="center">
		<CALLELEMENT NAME="OpenMarket/Xcelerate/AssetType/CSElement/Variables.NextStep"/>
	</div>
</then>
</if>
</div>
</FTCS>

