<?xml version="1.0" ?>
<!DOCTYPE FTCS SYSTEM "futuretense_cs.dtd">
<FTCS Version="1.1">
<!-- 
$Logfile: /VerticalApps/XcelerateD/install/Gator/Populate/ElementCatalog/OpenMarket/Xcelerate/AssetType/Segments/ContentForm.xml $ 
$Revision: 51 $ 
$Modtime: 8/16/04 2:27p $ 
-->
<!-- OpenMarket/Xcelerate/AssetType/Segments/ContentForm
--
-	Form for creating/editing  Segments
-- INPUT
--			ContentDetails: result of a scatter
-- OUTPUT
--
-- HISTORY 
   [2007-09-17 KG]
   * added XSS scripting fixes (adapted from 6.3 fixes); search for isCleanString
   * changed definitions of 'obj' to just forms[0] (not .elements[0])
   * performed a bit of code cleanup, though there's plenty left that could be done...
   [2007-10-09 KG]
   * XSS revision: minimized set of restricted characters.
-->
<CALLELEMENT NAME="OpenMarket/Xcelerate/Scripts/FormatDate" />
<CALLELEMENT NAME="OpenMarket/Xcelerate/Scripts/ValidateInputForXSS" />
<CALLELEMENT  NAME="OpenMarket/Gator/Scripts/SetDirtyState"/>
<ASSET.GETASSETTYPE NAME="Variables.assetname" OUTNAME="at"/>
<ASSETTYPE.GET NAME="at" FIELD="description" OUTPUT="at:description"/>
<SCRIPT LANGUAGE="JavaScript">
<![CDATA[
var obj = document.forms[0];
function Fixpagename(ourPage,nextstep)
{
	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;
	obj.pagename.value = newpage;
	obj.SegmentsNextStep.value = nextstep;
	
	obj.submit();

	return false;
}

function FixRulePagename(ourPage,nextstep,modification)
{
	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;

	obj.pagename.value = newpage;
	obj.SegmentsNextStep.value = nextstep;
	obj.SegmentsRuleScreen.value = modification;
	
	obj.submit();
	
	return false;
}

function displayTextboxes()
{
	var i = obj.sCompareOp.selectedIndex;
   // var selectedText = obj.sCompareOp.options[i].value;
    var selectedText = obj.sCompareOp.value;
	if (selectedText == "bt")
		document.getElementById('sInputField2').style.visibility = "visible";
	else
		document.getElementById('sInputField2').style.visibility = "hidden";
}

function myreplace(theval, x,y,xlatstr)
{
     // var  xlregexp = /xlkey/ ;
     // xlatstr = xlatstr.replace(xlregexp, xlatstr);
     var replacestr=/\bVariables.beginvalue\b/   ;
     var mustbebetween=xlatstr.replace(replacestr, x) ;
     replacestr=/\bVariables.endvalue\b/   ;
     alert(mustbebetween.replace(replacestr, y));
}

function FixRulePagenameValidate(ourPage,nextstep,modification,OptionName,SValueName,STypeName,HValueName)
{
	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;
	var oktosubmit1 = "true";
	var oktosubmit2 = "true";
	var oktosubmit3 = "true";
	var oktosubmit4 = "true";
	var osubmit1 = "true";
	var osubmit2 = "true";
	var osubmit3 = "true";
	var osubmit4 = "true";

	var IntFalse = "true";
  
	var Hsubmit = "true";
 
	var start = "true";
	var end = "true";

	obj.pagename.value = newpage;
	obj.SegmentsNextStep.value = nextstep;
	obj.SegmentsRuleScreen.value = modification;
	var sValue1="";
	var sValue2="";
	var sValue3="";
	var sValue4="";
	var j= SValueName.length;
	var indexfirst=0;
	var indexlast=0;
	var count=0;
	var ourNum1=0;
	var ourNum2=0;
	var ourNum3=0;
	var ourNum4=0;
	var SYearDate="";
	var SMonthDate="";
	var SDayDate="";
	var SHourDate="";
	var SMinDate="";
	var SSecDate="";
	var EYearDate="";
	var EMonthDate="";
	var EDayDate="";
	var EHourDate="";
	var EMinDate="";
	var ESecDate="";				  

	var illegalchars = "\",\"\",\',\'\'";
	var	ilsubmit1 = "true";
	var ilsubmit2 = "true";
	
  	if(j!=0)
	{		 
		while(indexlast!=j-1)
		{
     indexfirst=SValueName.indexOf("*",indexlast);
     indexlast=SValueName.indexOf("!",indexfirst);
		 count++;
    }
	}   
	if(count=="4")
	{sValue1="sValue1";
	 sValue2="sValue2";
	 sValue3="sValue3";
	 sValue4="sValue4";
	}
  
	if(count=="3")
	{sValue1="sValue1";
	 sValue2="sValue2";
	 sValue3="sValue3";
  }
	
 	if(count=="2")
  {sValue1="sValue1";
	 sValue2="sValue2";
	}
	
	if(count=="1")
	{sValue1="sValue1";
	}

	if(obj.ShoppingCart.value!="]]><XLAT.STREAM KEY="dvin/AT/Segments/ShoppingCart" ESCAPE="true" ENCODE="false"/><![CDATA[")
	 {
   
		if(sValue1!="")
		{
		 if(obj.sValue1.value!="")
				{		 
				if(!CheckType('sValue1',STypeName)){return false;}
				}
		}
		
		if(sValue2!="")
		{
		 if(obj.sValue2.value!="")
				{ 
				if(!CheckType('sValue2',STypeName)){return false;}
				}
		}
	
		
		if(sValue3!="")
		{
		 if(obj.sValue3.value!="")
				{ 		 
				if(!CheckType('sValue3',STypeName)){return false;}
				}
		}
	
		if(sValue4!="")
		{
		 if(obj.sValue4.value!="")
				{  
				if(!CheckType('sValue4',STypeName)){return false;}
				}
		}
	 }
	 
	if(obj.ShoppingCart.value=="]]><XLAT.STREAM KEY="dvin/AT/Segments/ShoppingCart" ESCAPE="true" ENCODE="false"/><![CDATA[")
	 {
			if(sValue1!="")
			{
			 if(obj.sValue1.value!="")
					{		
					if(!CheckType('sValue1','money')){return false;}
					}
			}
			
			if(sValue2!="")
			{
			 if(obj.sValue2.value!="")
					{ 
					if(!CheckType('sValue2','money')){return false;}
					}
			}
				if(sValue3!="")
			{
			 if(obj.sValue3.value!="")
					{ 	                   
					 if(!IsPositiveInt(obj.sValue3.value)){
					 alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldmustbeInteger" ESCAPE="true" ENCODE="false"/><![CDATA[");
					 obj.elements[sValue3].focus();
					 return false;}
					}
			}
		
			if(sValue4!="")
			{
			 if(obj.sValue4.value!="")
					{  
					if(!IsPositiveInt(obj.sValue4.value)){
					 alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldmustbeInteger" ESCAPE="true" ENCODE="false"/><![CDATA[");
					 obj.elements[sValue4].focus();
					 return false;}
					}
			}
	 }
		 
		
  if(HValueName!="")
	{  
     
		 if(obj.SummableType[0].checked)
				{     
				 var type="";
				 var selectName="";
				 if(obj.sValue.value=="") {Hsubmit = "false";}
				 	
				 if(obj.sValue.value!="")
					{
					   selectName=obj.elements['sHField'].value;
						 if(selectName!="")
						 {
							type=obj.elements[selectName].value;
						 	if(!CheckType('sValue',type)){return false;}
						 }
						}
					}	
		 
		 if(obj.SummableType[1].checked)
		 {    
			if(sValue1!="")
			{	 	
			  
			 if(obj.sValue1.value=="") { osubmit1 = "false";}
        
			 if(obj.sValue1.value!="")
			 {
				if(!IsPositiveInt(obj.sValue1.value))
				{
				 IntFalse = "false";
				}
				else
				{
				 var ValueNumber=obj.sValue1.value;
         ValueNumber=parseInt(ValueNumber,10);
				 obj.sValue1.value=ValueNumber;
        }
			 }
		  }
	  }
	}
			
	if(HValueName=="")
	{ 
    if(count==4)
		{
		 if(obj.scAssetOp[0].checked)
		 {     
			if(obj.sValue1.value=="") { osubmit1 = "false";}
			if(obj.elements['sCompareOp1'].value=="bt")
			{     
				 if(obj.sValue1.value=="") {osubmit1 = "false";}
				 if(obj.sValue2.value=="") {osubmit2 = "false";}
			}
		 }	
		 else if(obj.scAssetOp[1].checked)
		 {    
			if(obj.sValue3.value=="") { osubmit3 = "false";}                        
			if(obj.elements['sCompareOp2'].value=="bt")
			{     
				 if(obj.sValue3.value=="") {osubmit3 = "false";}
				 if(obj.sValue4.value=="") {osubmit4 = "false";}
			}
		 }

		}
		if(count!=4) 
		{
		  if(sValue1!="")
			{	 	
       if(obj.sValue1.value=="") { osubmit1 = "false";}
			 if((osubmit1 == "true") && (illegalchars.indexOf(obj.sValue1.value) != -1)) { ilsubmit1 = "false";}
      
			}
			
			
			if(sValue1!="" && sValue2!="")
			{                        
				if(obj.elements[OptionName].value=="bt")
				{     
					 if(obj.sValue1.value=="") {osubmit1 = "false";}
					 if((osubmit1 == "true") && (illegalchars.indexOf(obj.sValue1.value) != -1)) { ilsubmit1 = "false";}
					 if(obj.sValue2.value=="") {osubmit2 = "false";}
					 if((osubmit2 == "true") && (illegalchars.indexOf(obj.sValue2.value) != -1)) { ilsubmit2 = "false";}
				}
			}
		}	
	}
  if (obj.DRFconstrainttype.value == "range") {
  if (STypeName == "int" || STypeName == "short" || STypeName == "long" || STypeName == "double")
	 {
    var ourNum1 = parseFloat(obj.sValue1.value);
	 }
	 else if(STypeName == "timestamp"){ 	
	 	 SYearDate=obj.elements['00StartYear'].value; 
		 SMonthDate=obj.elements['00StartMonth'].value;
		 SDayDate=obj.elements['00StartDay'].value;
		 SHourDate=obj.elements['00StartHour'].value;
		 SMinDate=obj.elements['00StartMin'].value;
		}	 
   
		    
			
      
			  if((obj.elements[OptionName].value!="xxgtxx") && (obj.elements[OptionName].value!="xxltxx")&& (obj.elements[OptionName].value!="bt"))
				{
				if (STypeName == "int" || STypeName == "short" || STypeName == "long" || STypeName == "double")
					{   
							if(sValue1!="")  
							{        
								if ((obj.DRFrangestart.value <= ourNum1) && (obj.DRFrangeend.value >= ourNum1)) {
											oktosubmit1 = "true";
									}
								else {oktosubmit1 = "false";}	
							}	
							
						  if(sValue3!="")
							{ 
							  ourNum3 = parseFloat(obj.sValue3.value);
                          if ( (obj.DRFrangestart.value <= ourNum3) && (obj.DRFrangeend.value >= ourNum3)) {
									oktosubmit3 = "true";
									}
									else {
									oktosubmit3 = "false";
									}
							}
							if(sValue2!="")  
							{ 
							 obj.sValue2.value="";	
							}

					}
				 if(STypeName == "timestamp")
					{
					 if(!CheckDate(obj.DRFrangestart.value,obj.DRFrangeend.value,SYearDate,SMonthDate,SDayDate,SHourDate,SMinDate,'equal'))
 						 { start="false";}
					}
				 
			  }

			  if(obj.elements[OptionName].value=="bt")
				{
					if(STypeName == "int")
					{   
					
              if(sValue1!="")  
							{        	 
								if ((obj.DRFrangestart.value <= ourNum1) && (obj.DRFrangeend.value >= ourNum1)) {
											oktosubmit1 = "true";
									}
								else {oktosubmit1 = "false";}	
							}	
							if(sValue2!="")  
							{ 
								ourNum2 = parseFloat(obj.sValue2.value);
                if ( (obj.DRFrangestart.value <= ourNum2) && (obj.DRFrangeend.value >= ourNum2)) {
											oktosubmit2 = "true";
									}
									else{oktosubmit2 = "false";}
              }
							if(sValue3!="")
							{ 
							  ourNum3 = parseFloat(obj.sValue3.value);
                if ( (obj.DRFrangestart.value <= ourNum3) && (obj.DRFrangeend.value >= ourNum3)) {
											oktosubmit3 = "true";
									}
									else{oktosubmit3 = "false";}
              }
		
							if(sValue4!="")
							{ ourNum4 = parseFloat(obj.sValue4.value);
                if ( (obj.DRFrangestart.value <= ourNum4) && (obj.DRFrangeend.value >= ourNum4)) {
											oktosubmit4 = "true";
									}
									else{oktosubmit4 = "false";}
							}
					}
				 if(STypeName == "timestamp")        
					{
				   EYearDate=obj.elements['00doEndYear'].value;
					 EMonthDate=obj.elements['00doEndMonth'].value;
					 EDayDate=obj.elements['00doEndDay'].value;
					 EHourDate=obj.elements['00doEndHour'].value;
					 EMinDate=obj.elements['00doEndMin'].value;
			
					 if(!CheckDate(obj.DRFrangestart.value,obj.DRFrangeend.value,SYearDate,SMonthDate,SDayDate,SHourDate,SMinDate,'equal'))
 						 { start="false";}
					 if(!CheckDate(obj.DRFrangestart.value,obj.DRFrangeend.value,EYearDate,EMonthDate,EDayDate,EHourDate,EMinDate,'equal'))
 						 { end="false";}		
          }
				 
			 }
			 
			  if((obj.elements[OptionName].value=="xxgtxx"))
				{ 
				 if(STypeName == "int")
					{
						if(sValue1!="")  
						{
							if ((obj.DRFrangestart.value <= ourNum1) && (obj.DRFrangeend.value > ourNum1)) {
										oktosubmit1 = "true";
								}
							else  {oktosubmit1 = "false";}	
						}	
						
						if(sValue3!="")
						{ 
							ourNum3 = parseFloat(obj.sValue3.value);
              if ( (obj.DRFrangestart.value <= ourNum3) && (obj.DRFrangeend.value > ourNum3)) {
										oktosubmit3 = "true";
								}
								else{oktosubmit3 = "false";}
            }
					}	
				 if(STypeName == "timestamp")
					{    
           if(!CheckDate(obj.DRFrangestart.value,obj.DRFrangeend.value,SYearDate,SMonthDate,SDayDate,SHourDate,SMinDate,'greater'))
 						 { start="false";}
					 }

			 }
			 if((obj.elements[OptionName].value=="xxltxx"))
				{ 
				if(STypeName == "int")
				 {
						if(sValue1!="")  
						{
							if ((obj.DRFrangestart.value < ourNum1) && (obj.DRFrangeend.value >= ourNum1)) {
										oktosubmit1 = "true";
							}
							else {oktosubmit1 = "false";} 
						}
						if(sValue3!="")
						{ 
							ourNum3 = parseFloat(obj.sValue3.value);
              if ( (obj.DRFrangestart.value < ourNum3) && (obj.DRFrangeend.value >= ourNum3)) {
										oktosubmit3 = "true";
								}
								else{
										oktosubmit3 = "false";
									}
            }
					}
				 	
				if(STypeName == "timestamp")
					{	 
           if(!CheckDate(obj.DRFrangestart.value,obj.DRFrangeend.value,SYearDate,SMonthDate,SDayDate,SHourDate,SMinDate,'letter'))
 						 { start="false";}
          }
			 }
	}
	
	
	if (Hsubmit  == "false" ) {
		alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldcantbeblank" ESCAPE="true" ENCODE="false"/><![CDATA[");
		 obj.elements[HValueName].focus();
	}
	
	else if ( ilsubmit1 == "false" ) {
		alert ( "]]><XLAT.STREAM KEY="dvin/AT/Segments/Illegalcharacterinfield" ESCAPE="true" ENCODE="false"/><![CDATA[" )
			obj.elements['sValue1'].focus();
	}
	
	else if ( IntFalse == "false" ) {
		alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldmustbeInteger" ESCAPE="true" ENCODE="false"/><![CDATA[");
		 obj.elements['sValue1'].focus();
	}
	
	else if ( ilsubmit2 == "false" ) {
		alert ( "]]><XLAT.STREAM KEY="dvin/AT/Segments/Illegalcharacterinfield" ESCAPE="true" ENCODE="false"/><![CDATA[" )
			obj.elements['sValue2'].focus();
	}
	
	else if ( osubmit1 == "false" ) {
		alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldcantbeblank" ESCAPE="true" ENCODE="false"/><![CDATA[");
		 obj.elements['sValue1'].focus();
	}
	
	else if ( osubmit2 == "false" ) {
		alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldcantbeblank" ESCAPE="true" ENCODE="false"/><![CDATA[");
		 obj.elements['sValue2'].focus();
	}
	
	else if ( osubmit3 == "false" ) {
		alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldcantbeblank" ESCAPE="true" ENCODE="false"/><![CDATA[");
		 obj.elements['sValue3'].focus();
	}
	
	else if ( osubmit4 == "false" ) {
		alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldcantbeblank" ESCAPE="true" ENCODE="false"/><![CDATA[");
		 obj.elements['sValue4'].focus();
	}

  else if ( oktosubmit1 == "false" ) {
  
        myreplace(ourNum1, obj.DRFrangestart.value , obj.DRFrangeend.value , ']]><XLAT.STREAM KEY="dvin/AT/Segments/mustbebetween" ESCAPE="true" ENCODE="false"/><![CDATA[');
  		obj.elements['sValue1'].focus();
	}
	
	else if ( oktosubmit2 == "false" ) {  
        myreplace(ourNum2, obj.DRFrangestart.value , obj.DRFrangeend.value , ']]><XLAT.STREAM KEY="dvin/AT/Segments/mustbebetween" ESCAPE="true" ENCODE="false"/><![CDATA[');
 		obj.elements['sValue2'].focus();
	}
	else if ( oktosubmit3 == "false" ) {  alert("test1");
        myreplace(ourNum3, obj.DRFrangestart.value , obj.DRFrangeend.value , ']]><XLAT.STREAM KEY="dvin/AT/Segments/mustbebetween" ESCAPE="true" ENCODE="false"/><![CDATA[');
 		 obj.elements['sValue3'].focus();
	}
	else if ( oktosubmit4 == "false" ) {
        myreplace(ourNum4, obj.DRFrangestart.value , obj.DRFrangeend.value , ']]><XLAT.STREAM KEY="dvin/AT/Segments/mustbebetween" ESCAPE="true" ENCODE="false"/><![CDATA[');
		obj.elements['sValue4'].focus();
	}
	else if ( start == "false" ) {    
        myreplace(ourNum5, obj.DRFrangestart.value , obj.DRFrangeend.value , ']]><XLAT.STREAM KEY="dvin/AT/Segments/StartDatemustbebetween" ESCAPE="true" ENCODE="false"/><![CDATA[');
		 obj.elements['00StartMonth'].focus();
	}
	else if ( end == "false" ) {
        myreplace(ourNum6, obj.DRFrangestart.value , obj.DRFrangeend.value , ']]><XLAT.STREAM KEY="dvin/AT/Segments/StartDatemustbebetween" ESCAPE="true" ENCODE="false"/><![CDATA[');
		 obj.elements['00doEndMonth'].focus();
	}
    else if(obj.durationType && obj.durationType[1].checked && obj.elements['sHinterval'].value==""){
                alert ( " ]]><XLAT.STREAM KEY="dvin/AT/Segments/fieldcantbeblank"/><![CDATA[");
		        obj.elements['sHinterval'].focus();
    }
  else 
	{	
		obj.submit();
	} 
	return false;
}

function IsPositiveInt(StrVar) {
	if (!IsInt(StrVar)) return false;
	if (parseInt(StrVar) < 0) return false;
	return true;
}
/*
]]>
<!-- to check if the string is belong to the 'Integer'!-->
<![CDATA[
function IsPositiveInt(StrVar)
{ 
	var Test="T"; 		 
	for(i=StrVar.length-1; i>=0; i--)
	{ 	 
		var Flag="F";
		for(j=9;j>=0; j--)
		{
			if(StrVar.charAt(i)==j)
			{
				Flag="T";
				break;
			}
		}
    if(Flag=="F"){Test="F"; break;}
	}
 if(Test=="F") return false;
 else return true;	
}
*/
]]> 
<!-- to check if the value is belong to the type!-->
<![CDATA[
function CheckType(value,type)
{ 
	/*if ( obj.elements[value].type == "select-one" ) {
      var ouridx = obj.elements[value].selectedIndex;
      var ourvalue = obj.elements[value].options[ouridx].value;
      
    } else {
      var ourvalue = obj.elements[value].value;
    } */  
	var ourvalue = obj.elements[value].value;
 
 
		if(type=="int")
			{
				if(!IsInt(ourvalue))           
				{alert("]]><XLAT.STREAM KEY="dvin/AT/Common/specifyvalueasINTEGER" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[value].focus();
				return false;}

				if(!IsInteger(ourvalue))             
				{alert("]]><XLAT.STREAM KEY="dvin/AT/Common/specifyINTEGERvalue0-65535" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[value].focus();
				return false;}
			}
		
		 if(type=="short")
			{
				if(!IsInt(ourvalue))  
				{alert("]]><XLAT.STREAM KEY="dvin/AT/Common/specifySHORTINTEGER" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[value].focus();
				return false;}
				
				if(!IsShort(ourvalue))
				{alert("]]><XLAT.STREAM KEY="dvin/AT/Common/specifyINTEGERvalue0-255" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[value].focus();
				return false;}
			}
			
		 if(type=="long")
			{
			 if(!IsInt(ourvalue))
				{alert("]]><XLAT.STREAM KEY="dvin/AT/Common/specifyLONGINTEGER" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[value].focus();
				return false;}
				
			 if(!IsLong(ourvalue))
				{alert("]]><XLAT.STREAM KEY="dvin/AT/Common/specifyINTEGERvalue0-65535" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[value].focus();
				return false;}
			}	
    		  
										
		 if(type=="double")
		 {
			if(!IsNumber(ourvalue))     
				{alert("]]><XLAT.STREAM KEY="dvin/AT/Common/specifyvalueasFLOAT" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[value].focus();
				return false;}
     } 
		 
 		 if(type=="money")
		 {
			 if(!IsMoney(ourvalue))     
			 {alert("]]><XLAT.STREAM KEY="dvin/AT/Common/specifyvalidmoneyvalue" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[value].focus();
				return false;}
     }
		 
return true;
}

function CheckDate(startvalue,endvalue,year,month,day,hour,min,type)
 { 		 
  var SYear=parseInt(startvalue.substring(0,4),10);
	var EYear=parseInt(endvalue.substring(0,4),10);
	var SMonth=parseInt(startvalue.substring(5,7),10);
	var EMonth=parseInt(endvalue.substring(5,7),10);
	var SDay=parseInt(startvalue.substring(8,10),10);
	var EDay=parseInt(endvalue.substring(8,10),10);
	var SHour=parseInt(startvalue.substring(11,13),10);
	var EHour=parseInt(endvalue.substring(11,13),10);
	var SMin=parseInt(startvalue.substring(14,16),10);
	var EMin=parseInt(endvalue.substring(14,16),10);
	var year=parseInt(year,10);
	var month=parseInt(month,10);
	var day=parseInt(day,10);
	var hour=parseInt(hour,10);
	var min=parseInt(min,10);
  
   
 if(EYear > year && year> SYear){return true;}
 else if(EYear == year && year> SYear)
 {     
	 if(EMonth >month){return true;}
	 else if(EMonth == month)
	 {          
	  if(EDay > day){return true;}
		else if(EDay == day)
		{
			if(EHour > hour){return true;}
			else if(EHour == hour){
			 if(EMin > min){return true;}
			 else if (EMin == min)
				 {
					if(type!="greater") {return true;}
					else return false;
				 }
			 else {return false;}
			}
			else {return false;}
    }
		else {return false;}
   }
	 else {return false;}
 }
	
 else if ( EYear > year && SYear==year)	
 {	 
   if(month > SMonth ){return true;}
	 else if(SMonth == month)
	 {          
	  if( day > SDay ){return true;}
		else if(SDay == day)
		{
			if( hour>SHour ){return true;}
			else if(SHour == hour){
			 if( min >SMin){return true;}
			 else if (SMin == min)
				 {
					if(type!="letter") {return true;}
					else return false;
				 }
			 else {return false;}
			}
			else {return false;}
    }
		else {return false;}
   }
	 else {return false;}
 } 
 
 else if(EYear == year && SYear==year)
 {		 
    if(EMonth >month && month> SMonth) {return true;}  
		else if(EMonth ==month && month> SMonth)
		{  
		 if(EDay > day){return true;}
		 else if(EDay == day)
			{
				if(EHour > hour){return true;}
				else if(EHour == hour){
				 if(EMin > min){return true;}
				 else if (EMin == min)
					 {
						if(type!="greater") {return true;}
						else return false;
					 }
				 else {return false;}
				}
				else {return false;}
			}
		 else {return false;}
		}
		
		if(EMonth >month &&  SMonth==month )
		{
		 if( day > SDay ){return true;}
		 else if(SDay == day)
			{
				if( hour>SHour ){return true;}
				else if(SHour == hour){
				 if( min >SMin){return true;}
				 else if (SMin == min)
					 {
						if(type!="letter") {return true;}
						else return false;
					 }
				 else {return false;}
				}
				else {return false;}
			}
		 else {return false;}
		}
	 
    else if(EMonth == month &&  SMonth==month )
	 {     
	    if(EDay > day && day >SDay){ return true;}      
			else if(EDay == day && day >SDay)
			{
            if(EHour > hour){return true;}
						else if(EHour == hour){
						 if(EMin > min){return true;}
						 else if (EMin == min)
							 {
								if(type!="greater") {return true;}
								else return false;
							 }
						 else {return false;}
						}
						else {return false;}
			}
         
			else if(EDay > day && SDay==day )
			 { 
						if( hour>SHour ){return true;}
						else if(SHour == hour){
						 if( min >SMin){return true;}
						 else if (SMin == min)
							 {
								if(type!="letter") {return true;}
								else return false;
							 }
						 else {return false;}
						} 
						else {return false;}
        }
				
      else if (EDay == day && SDay==day )
       {  
			    if(EHour > hour && hour>SHour)	{return true;}
					else if(EHour == hour && hour>SHour){
            if(EMin > min){return true;}
						 else if (EMin == min)
							 {
								if(type!="greater") {return true;}
								else return false;
							 }
						 else {return false;}
					 }
				 
				
					else if(EHour > hour &&  SHour==hour )
					{
              if( min >SMin){return true;}
							else if (SMin == min)
								 {
									if(type!="letter") {return true;}
									else return false;
								 }
							 else {return false;}
					}
			 
				 else if(EHour == hour &&  SHour ==hour)
				 {			
							 if(EMin > min && min >SMin) {return true;}
							 else if(EMin == min && min >SMin){
									if(type!="greater") {return true;}
									else return false;
								 }
										 
							 else if (EMin > min && SMin==min)
									 {
										if(type!="letter") {return true;}
										else return false;
									 }
										 
							 else {return false;}
         }//end of hour equal 		   
				 else {return false;} 			 
			 }//end of day equal
			else {return false;} 
			
   } //end of month equal
	 else {return false;}
 }//end of year check
 else {return false;}

 }//end

function SetAddEditRuleVariables(pulldown)
{
	for ( var i=0; i < pulldown.length; i++ ) {
		if ( pulldown[i].selected ) {
			break;
		}
	}
	
	var ourtarget = pulldown[i].value;
	var ourarray = ourtarget.split(",");		
	obj.SegmentsNextStep.value = ourarray[0];
	obj.SegmentsRuleScreen.value = ourarray[1];

	return false;
}

function GoAddEdit(ourPage,defaultnextstep,defaultmodification,operation,column,row)
{
	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;	

	obj.pagename.value = newpage;
	
	if ( obj.SegmentsNextStep.value == "" ) {
		obj.SegmentsNextStep.value = defaultnextstep;
	}
	if ( obj.SegmentsRuleScreen.value == "" ) {
		obj.SegmentsRuleScreen.value = defaultmodification;
	}
	obj.CriteriaOperation.value = operation;
	obj.CriteriaOperationReq.value = operation;
	obj.CriteriaRow.value = row;
	obj.CriteriaColumn.value = column;
	obj.RebuildScreen.value =  "NoBuild";
	if(!checkStartEndDateValidity()) {return false;}
	obj.submit();

	return false;
}

function AddEditRule(ourPage,nextstep,modification,operation,column,row)
{
	if (obj.elements['Segments:name'].value=="") {
	
		var namestring="]]><STRING.STREAM VALUE="Variables.at:description"/><![CDATA[";
		var replacestr=/\bVariables.at:description\b/ ;
		var xlatstr="]]><XLAT.STREAM KEY="dvin/Assetmaker/SpecifyUniqueName" ESCAPE="true" ENCODE="false" EVALALL="false"/><![CDATA[";
		var newstr=xlatstr.replace(replacestr, namestring) ;
		alert(newstr);
		obj.elements['AdvCols:name'].focus();
		return false;
	}
	
	var isclean = isCleanString(obj.elements['Segments:name'].value, '<">\'', true);
	if (!isclean) {
		alert("]]><XLAT.STREAM KEY="dvin/AT/Common/Apostrophenotallowedinname" ESCAPE="true" ENCODE="false"/><![CDATA[");
		obj.elements['Segments:name'].focus();
		return false;
	}
	
	if(!checkStartEndDateValidity()) {return false;}
	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;	

	obj.pagename.value = newpage;
	obj.SegmentsNextStep.value = nextstep;
	obj.SegmentsRuleScreen.value = modification;
	obj.CriteriaOperation.value = operation;
	obj.CriteriaRow.value = row;
	obj.CriteriaColumn.value = column;
	obj.RebuildScreen.value =  "NoBuild";
	
	obj.submit();

	return false;
}
function AddEditSpecificRule(ourPage,nextstep,modification,operation,column,row,arg2,arg3)
{
	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;	

	obj.pagename.value = newpage;
	obj.SegmentsNextStep.value = nextstep;
	obj.SegmentsRuleScreen.value = modification;
	obj.CriteriaOperation.value = operation;
	obj.CriteriaRow.value = row;
	obj.CriteriaColumn.value = column;
	obj.SegmentsArg2.value =  arg2;
	obj.SegmentsArg3.value =  arg3;
	obj.RebuildScreen.value =  "NoBuild";
	if(!checkStartEndDateValidity()) {return false;}
	obj.submit();

	return false;
}
function FixRuleArgPagename(ourPage,nextstep,modification,arg2,arg3,rebuild)
{
	var basePage = "OpenMarket/Xcelerate/Actions/";
	if(ourPage=="CopyFront")
	   ourPage="NewContentFront";

	var	newpage = basePage + ourPage;	

	obj.pagename.value = newpage;
	obj.SegmentsNextStep.value = nextstep;
	obj.SegmentsRuleScreen.value = modification;
	obj.SegmentsArg2.value =  arg2;
	obj.SegmentsArg3.value =  arg3;
	obj.RebuildScreen.value =  rebuild;
	
	obj.submit();

	return false;
}

function SelectFromTreeRebuild(ourPage,nextstep,where,modification,arg2,arg3)
{  
	var EncodedString = parent.frames["XcelTree"].document.TreeApplet.exportSelections()+'';
   var idArray = EncodedString.split(',');
   var assetcheck = unescape(idArray[0]);
   if (assetcheck.indexOf('assettype=')!=-1 && assetcheck.indexOf('id=')!=-1)
   { 
      var DecodedString = unescape(EncodedString); 
      obj.elements[where].value = DecodedString;
      obj.SegmentsNextStep.value = nextstep;
      
      var basePage = "OpenMarket/Xcelerate/Actions/";
      if(ourPage=="CopyFront")
        ourPage="NewContentFront";
      
      var	newpage = basePage + ourPage;
      obj.pagename.value = newpage;
      obj.SegmentsRuleScreen.value = modification;
      obj.SegmentsArg2.value =  arg2;
      obj.SegmentsArg3.value =  arg3;
      obj.RebuildScreen.value =  "SegmentSave";
      
      obj.submit();
   }
   else
   {
      ]]>
      alert("<XLAT.STREAM KEY="dvin/UI/PleaseSelectAssetFromTree"/>");
      <![CDATA[
   }
	
	return false;
}

function SelectFromTree(ourPage,nextstep,where,modification,arg2,arg3)
{  
   var EncodedString = parent.frames["XcelTree"].document.TreeApplet.exportSelections()+'';
   var idArray = EncodedString.split(',');
   var assetcheck = unescape(idArray[0]);
   if (assetcheck.indexOf('assettype=')!=-1 && assetcheck.indexOf('id=')!=-1)
   {
      var DecodedString = unescape(EncodedString); 
      obj.elements[where].value = DecodedString;
      obj.SegmentsNextStep.value = nextstep;
      
      var basePage = "OpenMarket/Xcelerate/Actions/";
      if(ourPage=="CopyFront")
         ourPage="NewContentFront";
      
      var	newpage = basePage + ourPage;
      obj.pagename.value = newpage;
      obj.SegmentsRuleScreen.value = modification;
      obj.SegmentsArg2.value =  arg2;
      obj.SegmentsArg3.value =  arg3;
      
      obj.submit();
	}
   else
   {
      ]]>
      alert("<XLAT.STREAM KEY="dvin/UI/PleaseSelectAssetFromTree"/>");
      <![CDATA[
   }
	return false;
}

function submitForm()
{
	return checkfields();
}

function getAssetName()
{
	return obj.elements['Segments:name'].value;
}

function checkfields()
{
	if (obj.elements['Segments:name'].value=="")
	{         
		var namestring="]]><STRING.STREAM VALUE="Variables.at:description"/><![CDATA[";
		var replacestr=/\bVariables.at:description\b/ ;
		var xlatstr="]]><XLAT.STREAM KEY="dvin/Assetmaker/SpecifyUniqueName" ESCAPE="true" ENCODE="false" EVALALL="false"/><![CDATA[";
		var newstr=xlatstr.replace(replacestr, namestring) ;
		alert(newstr);
		
		obj.elements['Segments:name'].focus();
		return false;
	}
	var isclean = isCleanString(obj.elements['Segments:name'].value, '<">\'', true);
	if (!isclean) {
		alert("]]><XLAT.STREAM KEY="dvin/AT/Common/Apostrophenotallowedinname" ESCAPE="true" ENCODE="false"/><![CDATA[");
		obj.elements['Segments:name'].focus();
		return false;
	}
	
	if(!checkStartEndDateValidity()) {return false;}	
	obj.submit();
	return false;
}
]]>
<!-- to check if the string is belong to the 'Integer'!-->
<![CDATA[
function IsInt(str) {
	/* strip leading zeroes to prevent false negative! */
	while (str.charAt(0) == '0' && str.length > 1) str = str.substr(1);
	var i = parseInt(str);
	if (isNaN(i))
		return false;
	i = i.toString();
	if (i != str)
		return false;
	return true;
}
/*
function IsInt(StrVar)
{ 
 var Test="T"; 		 
 for(i=StrVar.length-1; i>=0; i--)
	{ 	 
	 	var Flag="F";
		if(i==0)
		{ 
		 if(StrVar.charAt(0)=="-")
		 {
		 Flag="T";
		 }
		 else
		 {
		  for(j=9;j>=0; j--)
				{
				if(StrVar.charAt(0)==j)
					{
					 Flag="T";
					 break;
					}
				}	
		 }
		}
		else
		{
			for(j=9;j>=0; j--)
				{
				 if(StrVar.charAt(i)==j)
					{
					 Flag="T";
					 break;
					}
				}
		}
 		if(Flag=="F"){Test="F"; break;}
	}
 if(Test=="F") return false;
 else return true;	
}
*/
]]>
<!-- to check if the string is the 'Integer'!-->
<![CDATA[
function IsInteger(StrVar)
{
 if(IsInt(StrVar))
 {
  var StrNum=parseInt(StrVar);
  if(StrNum >= -2147483648 && 2147483647 >= StrNum)
   return true;
	else 
	 return false; 
 }
 else
  return false; 
}

<!-- to check if the string is the 'Short'!-->
function IsShort(StrVar)
{
 if(IsInt(StrVar))
 {
  var StrNum=parseInt(StrVar);
  if(StrNum >= -32768 && 32767 >= StrNum)
   return true;
	else 
	 return false; 
 }
 else
  return false; 
}
]]>
<!-- to check if the string is the 'Long'!-->
<![CDATA[
function IsLong(StrVar)
{
	if(IsInt(StrVar)) {
		var StrNum=parseInt(StrVar);
		if (StrNum >= -9223372036854775808 && 9223372036854775807 >= StrNum)
			return true;
		else 
			return false; 
	}
	else
		return false; 
}
]]>
<!-- to check if the string is the 'Float'!-->
<![CDATA[
function IsNumber(str)
{
    return /^[-+]?\d*((\.\d+)([eE][-+]?\d+)?)?$/.test(str);
}
/*function IsNumber(StrVar)
{
        var loopEnd = 0;
        if (StrVar.charAt(0) == "-")
            loopEnd = 1;

        var countDecimalPoint = 0;
        var countE = 0;
        var Test="T";
        for(i=StrVar.length-1; i>=loopEnd; i--)
            {
                var Flag="F";
                if(StrVar.charAt(i)==".")
                {
                    countDecimalPoint++;
                    Flag="T";
                    continue;
                }
                if(StrVar.charAt(i)=="E" || StrVar.charAt(i)=="e")
                {
                    countE++;
                    Flag="T";
                    continue;
                }
                for(j=9;j>=0; j--)
                {
                    if(StrVar.charAt(i)==j)
                    {
                     Flag="T";
                     break;
                    }
                }
                if(Flag=="F" || countDecimalPoint > 1 || countE > 1)
                    {
                    Test="F"; break;
                    }
            }
         if(Test=="F") return false;
         else return true;
}
*/
]]>
<!-- to check if the string is the 'Money'!-->
<![CDATA[
function IsMoney(StrVar)
{
    return /^[0-9]+(,[0-9]{3})*(\.[0-9]{1,3})?$/.test(StrVar);
}
/*function IsMoney(StrVar)
{
  var flag=StrVar.length-1;
  var test="T";
	for(var i=StrVar.length-1; i>=0; i--)
	{ 
	  var acc="F";
		if(StrVar.charAt(i)==".")
		{
		 flag=i;	
		 if(StrVar.length-i>3)
			{test="F"; 
       return false;}
    }
	  else if((StrVar.charAt(i)==","))
		{ 
		  for(var j=10; j>=0; j--)
			{ 
				if((flag-i)/4==j)  
					{
					 acc="T";
					}
			 }
      if(acc=="F")
			{
			 return false;
			}
    }
		
		else if(!IsInt(StrVar.charAt(i)))
		{test="F"; return false;} 
	}
	if(test=="T")
	return true;
	else return false;
}   */
]]>
<!-- to check if the string include an apostrophe!-->
<![CDATA[
function Isapostrophe(StrVar)
{
 for(i=StrVar.length-1; i>=0; i--)
	{ 	 
    if(StrVar.charAt(i)=="'"){return false;}
	}
 return true;	
}	 

function noimp()
{
	alert("]]><XLAT.STREAM KEY="dvin/AT/Segments/Notyetimplemented" ESCAPE="true" ENCODE="false"/><![CDATA[");  
}

function SetCancelFlag () {
	if(confirm("]]><XLAT.STREAM KEY="dvin/Common/CancelClicked" ESCAPE="true" ENCODE="false"/><![CDATA[")){
		obj.elements['upcommand'].value="cancel";
		obj.submit();
		return false;
	}
}
]]>
</SCRIPT>

<!--For debugging
<if COND="IsVariable.SegmentsNextStep=true">
	<then>
		<br/>(On <csvar NAME="Variables.SegmentsNextStep"/>)
	</then>
</if>
-->
<SETVAR NAME="OptionName" VALUE="Variables.empty"/>
<SETVAR NAME="SValueName" VALUE="Variables.empty"/>
<SETVAR NAME="STypeName" VALUE="Variables.empty"/>
<SETVAR NAME="HValueName" VALUE="Variables.empty"/>
<SETVAR NAME="WrongPage" VALUE="Variables.empty"/>

<CALLELEMENT NAME="OpenMarket/Xcelerate/AssetType/Segments/SaveRulesetTuples">
	<ARGUMENT NAME="Prefix" VALUE="Segments"/>
</CALLELEMENT>
<!-- Fix for PR#19224.Added two variables for this mainly PickAttributeSelected and CriteriaOperationReq.PickAttributeSelected is set to true when the user clicks on history attribute from the history page.This would allow us to check if we want to delete the rule generated by the click on the attribute link.CriteriaOperationReq 
			was created to have an additonal variable to track the original action.The variable CriteriaOperatin changes during several actions on the add screen and cannot be used to remember the original criteria operation-->
<if COND="IsVariable.PickAttributeSelected=false">
<then>
	<setvar NAME="PickAttributeSelected" VALUE="Variables.empty"/>
</then>
</if>

<if COND="IsVariable.CriteriaOperation=false">
<then>
	<setvar NAME="CriteriaOperation" VALUE="Variables.empty"/>
</then>
</if>
<if COND="IsVariable.CriteriaOperationReq=false">
<then>
	<setvar NAME="CriteriaOperationReq" VALUE="Variables.empty"/>
</then>
</if>

<if COND="IsVariable.RebuildScreen=false">
<then>
	<setvar NAME="RebuildScreen" VALUE="Variables.empty"/>
</then>
</if>

<if COND="IsVariable.CriteriaRow=false">
<then>
	<setvar NAME="CriteriaRow" VALUE="Variables.empty"/>
</then>
</if>

<if COND="IsVariable.CriteriaColumn=false">
<then>
	<setvar NAME="CriteriaColumn" VALUE="Variables.empty"/>
</then>
</if>

<if COND="IsVariable.SegRuleSetHint=false">
<then>
	<setvar NAME="SegRuleSetHint" VALUE="Variables.empty"/>
</then>
</if>

<callelement NAME="OpenMarket/Xcelerate/AssetType/Segments/CoFSetVar"/>

<if COND="IsVariable.SegmentsNextStep=true">
<then>
	<callelement NAME="OpenMarket/Xcelerate/AssetType/Segments/Variables.SegmentsNextStep"/>
</then>
<else>
	<callelement NAME="OpenMarket/Xcelerate/AssetType/Segments/ContentForm1"/>
</else>
</if>

<INPUT TYPE="hidden" NAME="upcommand" VALUE="submit"/>
<INPUT TYPE="HIDDEN" NAME="SegmentsNextStep" VALUE=""/>
<INPUT TYPE="HIDDEN" NAME="SegmentsRuleScreen" VALUE=""/>
<INPUT TYPE="HIDDEN" NAME="SegmentsArg2" VALUE=""/>
<INPUT TYPE="HIDDEN" NAME="SegmentsArg3" VALUE=""/>
<INPUT TYPE="HIDDEN" NAME="OptionName" VALUE=""/>
<STRING.ENCODE VARIABLE="PickAttributeSelected" VARNAME="PickAttributeSelected"/>
<INPUT TYPE="HIDDEN" NAME="PickAttributeSelected" VALUE="Variables.PickAttributeSelected" REPLACEALL="Variables.PickAttributeSelected"/>
<STRING.ENCODE VARIABLE="CriteriaOperationReq" VARNAME="CriteriaOperationReq"/>
<INPUT TYPE="HIDDEN" NAME="CriteriaOperationReq" VALUE="Variables.CriteriaOperationReq" REPLACEALL="Variables.CriteriaOperationReq"/>
<INPUT TYPE="HIDDEN" NAME="SValueName" VALUE=""/>
<INPUT TYPE="HIDDEN" NAME="HValueName" VALUE=""/>
<INPUT TYPE="HIDDEN" NAME="WrongPage" VALUE=""/>
<INPUT TYPE="hidden" NAME="AssetlistTag" VALUE=""/>		
<INPUT TYPE="HIDDEN" NAME="STypeName" VALUE=""/> 
<STRING.ENCODE VARIABLE="SegmentsRuleScreen" VARNAME="SegmentsRuleScreen"/>
<INPUT TYPE="HIDDEN" NAME="ShoppingCart" VALUE="Variables.SegmentsRuleScreen" REPLACEALL="Variables.SegmentsRuleScreen"/> 
<STRING.ENCODE VARIABLE="CriteriaOperation" VARNAME="CriteriaOperation"/>
<INPUT TYPE="HIDDEN" NAME="CriteriaOperation" VALUE="Variables.CriteriaOperation" REPLACEALL="Variables.CriteriaOperation"/>
<STRING.ENCODE VARIABLE="RebuildScreen" VARNAME="RebuildScreen"/>
<INPUT TYPE="HIDDEN" NAME="RebuildScreen" VALUE="Variables.RebuildScreen" REPLACEALL="Variables.RebuildScreen"/>
<STRING.ENCODE VARIABLE="CriteriaRow" VARNAME="CriteriaRow"/>
<INPUT TYPE="HIDDEN" NAME="CriteriaRow" VALUE="Variables.CriteriaRow" REPLACEALL="Variables.CriteriaRow"/>
<STRING.ENCODE VARIABLE="CriteriaColumn" VARNAME="CriteriaColumn"/>
<INPUT TYPE="HIDDEN" NAME="CriteriaColumn" VALUE="Variables.CriteriaColumn" REPLACEALL="Variables.CriteriaColumn"/>
<![CDATA[<INPUT TYPE="HIDDEN" NAME="SegRuleSetHint" VALUE="]]><STRING.STREAM VALUE="Variables.SegRuleSetHint"/><![CDATA["/>]]>

</FTCS>
