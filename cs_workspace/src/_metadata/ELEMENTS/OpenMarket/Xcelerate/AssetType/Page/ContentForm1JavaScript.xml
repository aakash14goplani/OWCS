<?xml version="1.0" ?>
<!DOCTYPE ftcs SYSTEM "futuretense_cs.dtd">
<ftcs version="1.2">
<!-- OpenMarket/Gator/FlexibleAssets/Common/ContentForm1JavaScript
-
- INPUT
-   flextype - [asset|group]   
- OUTPUT
-
-->
<!--
[2007-09-13 KG]
 * added XSS scripting fixes (adapted from 6.3 fixes); search for isCleanString
 * changed definitions of 'obj' to just forms[0] (not .elements[0])
 * added CDATA tags where needed.
[2007-11-05 KG] SelectFromTree function fixes:
 * fixed some errors that surfaced due to 11/01 checkin
 * fixed instance of PleaseSelectAssetFromTree locale string to properly escape.
-->

<PROPERTY.GET PARAM="cc.useLegacyInputNames" INIFILE="gator.ini" VARNAME="cs_PropUseLegacyInputNames"/>
<CALLELEMENT NAME="OpenMarket/Xcelerate/Scripts/ValidateInputForXSS" />
<CALLELEMENT NAME="OpenMarket/Xcelerate/Scripts/FormatDate" />

<CALLELEMENT NAME="OpenMarket/Xcelerate/Actions/AssetMgt/AssetChildrenFormNewJavascript"/>
<CALLELEMENT NAME="OpenMarket/Xcelerate/Util/DojoFileCheck" />

<!-- This form is repostable, and we are going to redirect the standard repost to our local javascript function to
       insure that the proper checking gets done when that repost happens. -->
<SETVAR NAME="repostContentFormJavascript" VALUE="repostFlexContentForm();"/>
<SETVAR NAME="isAssetRepostable" VALUE="true"/>

<PROPERTY.GET PARAM="xcelerate.imageeditor.clarkii.basepath" INIFILE="futuretense_xcel.ini" VARNAME="ImageEditorPath"/>

<if COND="Variables.ImageEditorPath=Variables.Empty">
	<then>
		<SETVAR NAME="ImageEditorPath" VALUE="CS.Property.ft.cgipath/ImageEditor/clarkii/"/>
	</then>
</if>
<script type="text/javascript" src="Variables.ImageEditorPathswfobject.js" REPLACEALL="Variables.ImageEditorPath"></script>

<SCRIPT LANGUAGE="Javascript">

<![CDATA[    

function prepareForAssetRelationPost()
{
	relPrepareForSubmit();
}

var repostFlexContentFormVar=false;
var submitFlexContentFormVar=false;
function repostFlexContentForm()
{
    repostFlexContentFormVar=true;
    if (!checkCKloaded())
        return false;

    prepareForAssetRelationPost();
    copyStartEndDateFields();
    selAllAll();
	if(!editorType || editorType!='clarkii'){
		if (obj.elements['doSubmit'].value=="yes")
		{
			repostContentForm();
		}	
	}
}

function cancelFlexContentForm()
{
	if(confirm("]]><XLAT.STREAM KEY="dvin/Common/CancelClicked" ESCAPE="true" ENCODE="false"/><![CDATA[")){
		obj.elements['upcommand'].value="cancel";
		obj.submit();
		return false;
	}

}

function getAssetName()
{
	]]> var nameField = '<STRING.STREAM VALUE="flexVariables.flextypes:name"/>'; <![CDATA[
    return obj.elements[nameField].value;
}

function submitForm()
{
	// PR 27606 - In UC1 the moment Save is clicked then the asset is saved and the call to EditFront in EditPost leads to Edit page again.
	//			  Here the Edit form is being rendered as reposted Edit page which is not the case. It is a simple save and as good as clicking edit again.
	//			  Thus, we are removing the "isReposted" value only before submit. The add button for custom attributes would still retain the "isReposted" to work normally.  
	obj.elements['isReposted'].value = 'false';
	return submitFlexContentForm();
}

function submitFlexContentForm()
{
	submitFlexContentFormVar=true;
	if (!checkCKloaded())
        return false;
    selAllAll();
	if (('yes' == obj.elements['doSubmit'].value) && (!editorType || editorType!='clarkii')) {
		if (checkfields())
		{
			// Executing PreSave call for customizing attributes values before form submit.
]]> 
			var _preSave_ = '<STRING.STREAM VALUE="Variables._preSave_"/>'; 
<![CDATA[
			if(_preSave_ === 'true')
				executePreSave();
			obj.submit();
		}
	}
	return false;		
}

function executePreSave()
{
	fw.ui.dijit.form.preSave().execute({AssetType: obj.elements['AssetType'].value, PubName: obj.elements['PubName'].value, helper: fw.ui.dijit.form.preSaveFormHelper()});
}

function executeAfterLoad()
{
	fw.ui.dijit.form.afterLoad().execute({AssetType: obj.elements['AssetType'].value, PubName: obj.elements['PubName'].value, helper: fw.ui.dijit.form.afterLoadFormHelper()});
}

dojo.addOnLoad(function() {
	//Executing AfterLoad call for customizing attributes values after form load.
]]> 	
	var _afterLoad_ = '<STRING.STREAM VALUE="Variables._afterLoad_"/>'; 
<![CDATA[
	if(_afterLoad_ === 'true')
		executeAfterLoad();
});

function indexOfElement (e_name) {

    var form = document.forms[0];
    var index = -1;

    for (var i=0; i<form.elements.length; i++) {
        if (form.elements[i].name == e_name) {
            index = i;
            break;
        }
    }
    return index;
}

function checkparents()
{
    var myindex=0;
    var i, j, k, required, multiple, tmplname, tmplid, currentInfo, currentSelect, currentSelections;
    var hasParents, tempIndex, tempIndex2, tempIndex3;
    var numParents = obj.elements['numParents'].value;
    
    var totalTmpls = obj.elements['totalParentTmpls'].value;
    var numTreeTmpls = obj.elements['numTreeTmpls'].value;
    
    // for any select boxes or tree picks make sure they adhere to
    // required or multiple constraints.
    for (i=1; i<=numParents; i++)
    {
      currentSelect=obj.elements['_ParentDef_'+i+"_SelectedParents_"];
        
      if (currentSelect.type!="hidden")
        {
            currentSelections="";
            tempIndex=currentSelect.options.length;
         for (j=0; j<tempIndex; j++)
            {
                if (currentSelect.options[j].selected==true)
               currentSelections+=currentSelect.options[j].value+";";
            }
            if (currentSelections.length!=0)
                currentSelections=currentSelections.substring(0,currentSelections.length-1);
                
            currentInfo=obj.elements['_ParentDef_'+i+'_Info_'].value;
            tempIndex=currentInfo.indexOf(",");
            tempIndex2=currentInfo.indexOf(",",tempIndex+1);
            tempIndex3=currentInfo.indexOf(",",tempIndex2+1);
            required=currentInfo.substring("0", tempIndex);
            multiple=currentInfo.substring(tempIndex+1,tempIndex2);
            tmplname=currentInfo.substring(tempIndex2+1,tempIndex3);
            tmplid=currentInfo.substring(tempIndex3+1, currentInfo.length);
        }
        else
        {
         currentSelections = currentSelect.value;
        }
      
        if (currentSelect.type=="select-multiple")
        {
            if (currentSelections.length==0 && required=="true")
            {
                ]]>
                 var replacestr=/\bVariables.tmplname\b/   ;
                 var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/RequiredParentMissing" ENCODE="false" ESCAPE="true"/>' ;
                 var newstr=xlatstr.replace(replacestr, tmplname) ;
                 alert(newstr);
                <![CDATA[
                return false;
            }
        }
        if (currentSelect.type=="hidden")
        {
            if (numTreeTmpls > 0)
            {
                // loop through tree select templates
                for (k=1;k<=numTreeTmpls;k++)
                {
                    currentInfo=obj.elements['_ParentDef_'+(i+k-1)+'_Info_'].value;
                    tempIndex=currentInfo.indexOf(",");
                    tempIndex2=currentInfo.indexOf(",",tempIndex+1);
                    tempIndex3=currentInfo.indexOf(",",tempIndex2+1);
                    required=currentInfo.substring("0", tempIndex);
                    multiple=currentInfo.substring(tempIndex+1,tempIndex2);
                    tmplname=currentInfo.substring(tempIndex2+1,tempIndex3);
                    tmplid=currentInfo.substring(tempIndex3+1, currentInfo.length);
                    hasParents=obj.elements['_ParentDef_'+tmplname+'_HasParents_'].value;
                    
                    if (hasParents == "false" && required=="true")
                    {
                            ]]>
                             var replacestr=/\bVariables.tmplname\b/   ;
                             var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/RequiredParentMissing" ENCODE="false" ESCAPE="true"/>' ;
                             var newstr=xlatstr.replace(replacestr, tmplname) ;
                             alert(newstr);
                            <![CDATA[
                            return false;
                    }
               }
            }
        }
    }
    
     // finally make sure required templates with no groups available are rejected
     if (numParents>0)
     {
            var emptyCount;
            if (numTreeTmpls!=0)
                 emptyCount = parseInt(numParents)-1;
            if (numTreeTmpls==0)
                 emptyCount = parseInt(numParents);

            var totalTmplsNum=totalTmpls-parseInt(numTreeTmpls);
            
            if (totalTmplsNum>emptyCount)
            {
         var NumberCount=emptyCount+numTreeTmpls;
                 for (i=totalTmpls;i>NumberCount;i--)
                 {
                        currentInfo=obj.elements['_ParentDef_'+(i)+'_Info_'].value;
                        tempIndex=currentInfo.indexOf(",");
                        tempIndex2=currentInfo.indexOf(",",tempIndex+1);
                        tempIndex3=currentInfo.indexOf(",",tempIndex2+1);
                        required=currentInfo.substring("0", tempIndex);
                        multiple=currentInfo.substring(tempIndex+1,tempIndex2);
                        tmplname=currentInfo.substring(tempIndex2+1,tempIndex3);
                        tmplid=currentInfo.substring(tempIndex3+1, currentInfo.length);
                        if (required=="true")
                        {
                             ]]>
                             var replacestr=/\bVariables.tmplname\b/   ;
                             var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/RequiredParentMissing" ENCODE="false" ESCAPE="true"/>' ;
                             var newstr=xlatstr.replace(replacestr, tmplname) ;
                             alert(newstr);
                             <![CDATA[
                             return false;
                        }
                 }
            }
     }
    return true;
}

function SelectFromTree(nextstep,where)
{
    if (obj.elements['doSubmit'].value=="yes")
    {
      var EncodedString = parent.frames["XcelTree"].document.TreeApplet.exportSelections()+'';
      var idArray = EncodedString.split(',');
      var assetcheck = unescape(idArray[0]);
    
      if (assetcheck.indexOf('assettype=')!=-1 && assetcheck.indexOf('id=')!=-1)
      {
        //The following string processing is done to set the hidden field d<Content Parent Def id> to ""
        //so that the content parent def id is not picked up as a deleted entry.
        //Check OpenMarket/Gator/FlexibleAssets/Common/AssocParents.jsp and 
        //OpenMarket/Gator/FlexibleAssets/Common/ParentTreeSelect.jsp for details
        var newStr = unescape(idArray[0]).split('=');
        var str2 = newStr[1].split(',');
        var dParentId = "d"+str2[0];      
	  
        var DecodedString = unescape(EncodedString); 
        obj.elements[where].value = DecodedString;
        obj.TemplateChosen.value = nextstep;
        
        if(obj.elements[dParentId] != null)
            obj.elements[dParentId].value = "";
        repostFlexContentForm();
      }
      else
      {
         ]]>
         alert("<XLAT.STREAM KEY="dvin/UI/PleaseSelectAssetFromTree" ENCODE="false" ESCAPE="true"/>");
         <![CDATA[
      }
      
    }
    
    return false;
}

function SelectFromTreeAndTypeAhead(nextstep,where,widgetName )
{
    var obj = document.forms[0],
		selValue = {};
    if (obj.elements['doSubmit'].value=="yes")
    {
      var EncodedString = parent.frames["XcelTree"].document.TreeApplet.exportSelections()+'';
      var idArray = EncodedString.split(',');
      var assetcheck = unescape(idArray[0]);	  
      if (assetcheck.indexOf('assettype=')!=-1 && assetcheck.indexOf('id=')!=-1)
      {
        //The following string processing is done to set the hidden field d<Content Parent Def id> to ""
        //so that the content parent def id is not picked up as a deleted entry.
        //Check OpenMarket/Gator/FlexibleAssets/Common/AssocParents.jsp and 
        //OpenMarket/Gator/FlexibleAssets/Common/ParentTreeSelect.jsp for details
        var newStr = unescape(idArray[0]).split('=');
        var str2 = newStr[1].split(',');
        var dParentId = "d"+str2[0];
		var newStr1 = unescape(idArray[0]).split(',');
		var id = (newStr1[0].split('='))[1];
		var type = (newStr1[1].split('='))[1];
		var subtype = (newStr1[3].split('='))[1];
		var name = (newStr1[2].split('='))[1];
		name = name.replace(/\+/g," ");
		subtype = subtype.replace(/\+/g," ");
		type = type.replace(/\+/g," ");	
		
		var nodes= [];
		nodes = dojo.query('div[name='+widgetName+']');
		if(nodes.length === 0)
			nodes = dojo.query('input[name='+widgetName+']');
		var typeWidgetIns = dijit.getEnclosingWidget(nodes[0]);
		
		selValue = {
			'id':id,
			'name':name,
			'subtype':subtype,
			'type':type
		};
		typeWidgetIns.setSelectedValue(selValue);	
		
        var DecodedString = unescape(EncodedString); 
       // obj.elements[where].value = DecodedString;
        //obj.TemplateChosen.value = nextstep;
        
        //if(obj.elements[dParentId] != null)
            //obj.elements[dParentId].value = "";
        //repostFlexContentForm();
      }
      else
      {
         ]]>
         alert("<XLAT.STREAM KEY="dvin/UI/PleaseSelectAssetFromTree" ENCODE="false" ESCAPE="true"/>");
         <![CDATA[
      }
      
    }
    
    return false;
}

function RemoveSelection(nextstep,where,what)
{
    if (obj.elements['doSubmit'].value=="yes")
    {
        obj.elements[where].value ="deleted";
        if (what!="")
            obj.elements[what].value ="yes";
        obj.TemplateChosen.value = nextstep;
                     
        repostFlexContentForm();
    }
    
    return false;
}

function checkinputtype(AttrName,AttrInputName,AttrType,value)
{ 
    var myindex=0;
    if (value!="")
    {
        if(AttrType=="int")
        {
         if(!IsInt(value))
         {
            ]]>
            var replacestr=/\bVariables.AttrName\b/   ;
            var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyInteger" ENCODE="false" ESCAPE="true"/>' ;
            var newstr=xlatstr.replace(replacestr, AttrName) ;
            alert(newstr);
            <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
            return false;  
         }
         
         if(!IsInteger(value))
            {
            ]]>
            alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyIntT9ToT9" ESCAPE="true" ENCODE="false"/>" );
            <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
            return false;
            }
        } 
        
        if(AttrType=="float")
        {
         if(!IsNumber(value))
                {
                ]]>
                var replacestr=/\bVariables.AttrName\b/   ;
                var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyFloat" ENCODE="false" ESCAPE="true"/>' ;
                var newstr=xlatstr.replace(replacestr, AttrName) ;
                alert(newstr);
                
                <![CDATA[
                    myindex = indexOfElement(AttrInputName);
                    obj.elements[myindex].focus();
                return false;   }   
        }   
                            
        if(AttrType=="dateS")
        { var DName=AttrName.substring(0,AttrName.length-1);
            if(!IsDateS(obj.elements[DName].value,AttrName))
                {   return false;   }   
      }
     
      if(AttrType=="date")
        {
/*	
			TODO: Fix this for date picker attributes to do client side validation
		   	alert("for attr "+AttrInputName);
        	document.getElementById(AttrInputName).value = document.getElementById(AttrInputName+'_div').innerHTML;
          if(!IsDate(value,AttrName,AttrInputName))
           {  return false;    }
*/
      }
        
        if(AttrType=="money")
        {
            if(!IsMoney(value))
                {
                    ]]>
                    var replacestr=/\bVariables.AttrName\b/   ;
                    var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyMoney" ENCODE="false" ESCAPE="true"/>' ;
                    var newstr=xlatstr.replace(replacestr, AttrName) ;
                    alert(newstr);
                    <![CDATA[
                        myindex = indexOfElement(AttrInputName);
                        obj.elements[myindex].focus();
                    return false;
                }
      }
    }
    
    return true;
}
]]>
<!-- to check if the string is belong to the 'Integer'!-->
<![CDATA[
function IsInt(str) {
	/* strip leading zeroes to prevent false negative! */
	while (str.charAt(0) == '0' && str.length > 1) str = str.substr(1);
	var i = parseInt(str);
	if (isNaN(i))
		return false;
	i = i.toString();
	if (i != str)
		return false;
	return true;
}
/*
function IsInt(StrVar)
{
 var Test="T";       
 for(i=StrVar.length-1; i>=0; i--)
    {    
        var Flag="F";
        if(i==0)
        { 
         if(StrVar.charAt(0)=="-")
         {
         Flag="T";
         }
         else
         {
          for(j=9;j>=0; j--)
                {
                if(StrVar.charAt(0)==j)
                    {
                     Flag="T";
                     break;
                    }
                }   
         }
        }
        else
        {
            for(j=9;j>=0; j--)
                {
                 if(StrVar.charAt(i)==j)
                    {
                     Flag="T";
                     break;
                    }
                }
        }
        if(Flag=="F"){Test="F"; break;}
    }
 if(Test=="F") return false;
 else return true;  
}
*/
]]>
<!-- to check if the string is the 'Integer'!-->
<![CDATA[
function IsInteger(StrVar)
{
 var Test="T";      
 var StrNum=parseInt(StrVar);
 if(IsInt(StrVar))
 {
  if(StrNum >= -9999999999 && 9999999999 >= StrNum)
   return true;
    else 
     return false; 
 }
 else
  return false; 
}

<!-- to check if the string is the 'Float'!-->
function IsNumber(str)
{
    return /^[-+]?\d+((\.\d+)([eE][-+]?\d+)?)?$/.test(str);
}

/*function IsNumber(StrVar)
{
    var loopEnd = 0;
    if (StrVar.charAt(0) == "-")
        loopEnd = 1;

    var countDecimalPoint = 0;
    var countE = 0;
    var Test="T";
    for(i=StrVar.length-1; i>=loopEnd; i--)
        {
            var Flag="F";
            if(StrVar.charAt(i)==".")
            {
                countDecimalPoint++;
                Flag="T";
                continue;
            }
            if(StrVar.charAt(i)=="E" || StrVar.charAt(i)=="e")
            {
                countE++;
                Flag="T";
                continue;
            }
            for(j=9;j>=0; j--)
            {
                if(StrVar.charAt(i)==j)
                {
                 Flag="T";
                 break;
                }
            }
            if(Flag=="F" || countDecimalPoint > 1 || countE > 1)
                {
                Test="F"; break;
                }
        }
     if(Test=="F") return false;
     else return true;
} */
]]>
<!-- to check if the string is the 'Date'!-->
<![CDATA[
function IsDateS(StrVar,DName)
{
 if(!IsInt(StrVar)) return false;
 else
  {
     if(DName.charAt(DName.length-1)=="Y" && 1753>StrVar)
    return false;
             
     else if(DName.charAt(DName.length-1)=="M" && StrVar>12)
    return false;
     
     else if(DName.charAt(DName.length-1)=="D" && StrVar>31)
      return false;
  }
 return true;   
}
]]>
<!-- to check if the string is the 'Date'!-->
<![CDATA[
function IsDate(StrVar,AttrName,AttrInputName)
{
  var myindex=0;
 if(StrVar.length!=10 && StrVar.length!=19)
 {
     ]]>
     var replacestr=/\bVariables.AttrName\b/   ;
     var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyDate"  ENCODE="false" ESCAPE="true"/>';
     var newstr=xlatstr.replace(replacestr, AttrName) ;
     alert(newstr);
     <![CDATA[
    myindex = indexOfElement(AttrInputName);
    obj.elements[myindex].focus();
     return false;
 }
 if(StrVar.length==10)
 {
  if(StrVar.charAt(4)!="-" || StrVar.charAt(7)!="-" )  
     {
     ]]>
     var replacestr=/\bVariables.AttrName\b/   ;
     var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyAttrNametDate" ENCODE="false" ESCAPE="true"/>' ;
     var newstr=xlatstr.replace(replacestr, AttrName) ;
     alert(newstr);
     <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
     return false;}
    else if(!IsInt(StrVar.substring(0,4))|| !IsInt(StrVar.substring(5,7)) || !IsInt(StrVar.substring(8,10)) || !IsInt(StrVar.charAt(9)))
     {
     ]]>
     var replacestr=/\bVariables.AttrName\b/   ;
     var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyDate" ENCODE="false" ESCAPE="true"/>' ;
     var newstr=xlatstr.replace(replacestr, AttrName) ;
     alert(newstr);
     <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
     return false;}
    else if(1753>StrVar.substring(0,4))
     {
        ]]>
        
        alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightYear"  ESCAPE="true" ENCODE="false"/>" );
        <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
         return false;
     }
    else if(StrVar.substring(5,7)>12)
     { 
        ]]>
        alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightMonth"  ENCODE="false" ESCAPE="true"/>" );
        <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
         return false;
     }
  else if(StrVar.substring(8,10)>31)
     {
        ]]>
         var replacestr=/\bVariables.AttrName\b/   ;
         var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightDay"  ENCODE="false" ESCAPE="true"/>' ;
         var newstr=xlatstr.replace(replacestr, AttrName) ;
         alert(newstr);

        <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
         return false;
     } 
 }   
 if(StrVar.length==19)
    {
  if(StrVar.charAt(4)!="-" || StrVar.charAt(7)!="-" || StrVar.charAt(10)!=" " || StrVar.charAt(13)!=":" || StrVar.charAt(16)!=":") 
    {
    ]]>
         var replacestr=/\bVariables.AttrName\b/   ;
         var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyAttrNametDateXX"  ENCODE="false" ESCAPE="true"/>' ;
         var newstr=xlatstr.replace(replacestr, AttrName) ;
         alert(newstr);
    
     <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
     return false;}
    
    else if(!IsInt(StrVar.substring(0,4))|| !IsInt(StrVar.substring(5,7)) || !IsInt(StrVar.substring(8,10)) || !IsInt(StrVar.substring(11,13))|| !IsInt(StrVar.substring(14,16)) || !IsInt(StrVar.substring(17,18))|| !IsInt(StrVar.substring(18)))
     {
     ]]>
         var replacestr=/\bVariables.AttrName\b/   ;
         var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyAttrNametDateXXboth"  ENCODE="false" ESCAPE="true"/>' ;
         var newstr=xlatstr.replace(replacestr, AttrName) ;
         alert(newstr);
     <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
     return false;}
    
  else if(1753>StrVar.substring(0,4))
     {
        ]]>
        alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightYear"  ENCODE="false" ESCAPE="true"/>" );
        <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
         return false;
     }
     
    else if(StrVar.substring(5,7)>12)
     { 
        ]]>
        alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightMonth"  ENCODE="false" ESCAPE="true"/>" );
        <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
         return false;
     }
  
    else if(StrVar.substring(8,10)>31)
     {
        ]]>
        alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightDay"  ENCODE="false" ESCAPE="true"/>" );
        <![CDATA[
            myindex = indexOfElement(AttrInputName);
            obj.elements[myindex].focus();
         return false;
     } 
 }
 return true;
}
]]>
<!-- to check if the string is the 'Money'!-->
<![CDATA[
function IsMoney(StrVar)
{
    return /^[0-9]+(,[0-9]{3})*(\.[0-9]{1,3})?$/.test(StrVar);
}
/*function IsMoney(StrVar)
{
  var flag=StrVar.length-1;
  var test="T";
    for(var i=StrVar.length-1; i>=0; i--)
    { 
      var acc="F";
        if(StrVar.charAt(i)==".")
        {
         flag=i;    
         if(StrVar.length-i>4)
            {test="F"; 
       return false;}
    }
      else if((StrVar.charAt(i)==","))
        { 
          for(var j=10; j>=0; j--)
            { 
                if((flag-i)/4==j)  
                    {
                     acc="T";
                    }
             }
      if(acc=="F")
            {
             return false;
            }
    }
        
        else if(!IsInt(StrVar.charAt(i)))
        {test="F"; return false;} 
    }
    if(test=="T")
    return true;
    else return false;
}  */

    function setCurrImage(obj) {
             obj.form.elements.currImage.value = obj.name;
    }
    
    function setCurrLinkset(obj) {
             obj.form.elements.currLinkset.value = obj.name;
    }
    
    function xfer(src,target) {
    
        var sc, itemText, i, oldIndex, numSelected, newIndex, listy;
        numSelected=0;
        for (i=0; i<src.options.length; i++) {
            if (src.options[i].selected) {
                var sc=i;
                var o=src.options[sc]
                items=new Option(o.text,o.value);
                newIndex=target.options.length;
                target.options[newIndex]=items;
                target.options[newIndex].selected=true
                oldIndex=i;
                numSelected++;
            }
        }
        i = 0;
        while (i<src.options.length) {
            if (src.options[i].selected)
                src.options[i]=null
            else
                i = i + 1;
        }
        delNul(src)
        delNul(target)
        
        if (src.options.length>0)
        {
            if (src.options.length>(oldIndex-numSelected+1))
                src.options[oldIndex-numSelected+1].selected=true;
            else
                src.options[src.options.length-1].selected=true;
        }
    }
    
    function delNul(lst){
             i = 0;
             while (i<lst.options.length) {
                        if (lst.options[i].value==-1)
                                  lst.options[i]=null
                        else
                                  i = i + 1;
             }
    }
	
	var ck_loadCompleteCount=0;
    function checkCKloaded()
    {
        if (typeof CKEDITOR == "object") {
            var _editorInstances = CKEDITOR.instances;
            instancesCount =0;
            for (instanceName in _editorInstances)
            {
            	if ('single' !== _editorInstances[instanceName].config.editingstyle) 
					continue;
                instancesCount++;
            }
            if (instancesCount != ck_loadCompleteCount)
            {
                ]]>
                alert("<XLAT.STREAM KEY="dvin/UI/Pageloadingtryagain"  ESCAPE="true" ENCODE="false"/>" );
                <![CDATA[
                return false;
            }
        }
        return true;
    }
	
    function selAll(lst){
          if (!lst) return;
             for (i=0; i<lst.options.length; i++)
                        lst.options[i].selected=true
             delNul(lst)
    }
	//global variables for image editor	
     var imageObjects=[];
     var oieImages = [];
     var oiePrefix='oie_';
     var clarkiiPrefix = "clarkii_";
     var count=0;
     var obj = document.forms[0];
     var inputName='';
     var editorType='';
    function selAllAll() {
        var i, multiValuedWidget, plainAttrName;
        var num= obj.elements['numAttrs'].value;
		obj.elements['doSubmit'].value="yes";
        editorType='';
        
        dojo.query('[id^="MultiVal"]', obj).forEach(function(item, index) {
        	var multiValDijit = dijit.byNode(item);
        	if (multiValDijit && typeof(multiValDijit.saveAction) === 'function')
        		multiValDijit.saveAction();
        });
        
        if (num!="0") {
            var AttrName;
            var AttrReq;
            var AttrType;
            var AttrInputType="text";
            for (var i=num; i>0; i--) {              
                NumReq="A"+(i)+"_RequireInfo";
                ValReq=obj.elements[NumReq].value;
                var NumValArray=ValReq.split("!");
                var ValArray=NumValArray[0].split("*");
                AttrName=ValArray[1];
                AttrReq=ValArray[2];
                if (ValArray.length==4) {
                    AttrType=ValArray[3].substr(0,ValArray[3].length);
                } else {
                    AttrType=ValArray[3];
                    AttrInputType=ValArray[4].substr(0,ValArray[4].length);
                }
			} // end for
			// for CKEditor, update hidden field input with most current value
                if (typeof CKEDITOR == "object"){ 
					var _editorInstances = CKEDITOR.instances;
					for (instanceName in _editorInstances){
						if (_editorInstances[instanceName]){
							//This should not update for the multivalue ckeditor.
							//That has its own hidden field to submit the values.Check below would prevent it.
							if('single' === _editorInstances[instanceName].config.editingstyle){
								var ockeditor = _editorInstances[instanceName];
								obj.elements[instanceName].value= ockeditor.getData();
							}
		                }
					}
	    		} // end if CKEditor
        } // end if
       // Extensive Page has no Parents just Extensive PageDefinition Assets
       var parentCount = 0 ; 
        var i,inputname;
        for (i=0;i<parentCount;i++) {
            inputname='_ParentDef_'+(i+1)+"_SelectedParents_";
            if(obj.elements[inputname].type=="select-multiple")
                selAll(obj.elements[inputname]);
        }

        // CLSID is used to distinguish between embedded objects
        var CLSID_REALOBJECT = "clsid:8AD9C840-044E-11D1-B3E9-00805F499D93";
        var CLSID_REALOBJECT_FIREFOX = "java:com.realobjects.eop.japplet.SwingEditorApplet";
        var CLSID_OIE        = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";
        if(navigator.userAgent.indexOf("MSIE")==-1)
        	CLSID_OIE		 = "application/x-shockwave-flash";

        
        // Make a note real object and ewebeditpro will not work together
        /* for ewebeditpro support */                
        if (typeof eWebEditPro == "object") {
            for (var i = 0; i < eWebEditPro.instances.length; i++) {
                eWebEditPro.instances[i].save();
            }
        } else {
            var realobjects=document.getElementsByTagName("object");
            for(i=0;i<realobjects.length;i++) {            
                var objId = realobjects[i].id;
                var realObjectClassId;
				if (document.getElementsByTagName("object")[0].getAttribute) 
                	realObjectClassId = document.getElementsByTagName("object")[0].getAttribute('classid');
					
                if ((realObjectClassId == CLSID_REALOBJECT) || (realObjectClassId == CLSID_REALOBJECT_FIREFOX)) {
                    var eopbject=document.getElementById(objId);
			]]><!--start added by pk support for flash attribute editor--><![CDATA[
			var eopbjectId = 	eopbject.id	;
			// Ignore the object tags whose id starts with flash.
			if(eopbjectId && !(eopbjectId.indexOf("flash") ==0))
			{
				]]><!--end added by pk support for flash attribute editor--><![CDATA[
				customField = eopbject.getCustomField();
				var eopform= document.forms[0];
				eopform.elements[customField].value =eopbject.getHTMLData();
				]]><!--start added by pk support for flash attribute editor--><![CDATA[
			}
			]]><!--end added by pk support for flash attribute editor--><![CDATA[
                }
            }
        }               

        // handling for Image Editor, we have two editors one is oie3 (older one), and the other is clarkii4(new)
        //oie3 is the default editor type, that is also defined in presentationobject.dtd as EDITORTYPE attribute
        imageObjects=[];
        oieImages = [];
        
        var objects = document.getElementsByTagName("object");

        for (i = 0; i < objects.length; i++) {        
            var objId = objects[i].id;            
            if(objId.indexOf(oiePrefix)!=-1){            
            	oieImages.push(objects[i]);
            }else if(objId.indexOf(clarkiiPrefix)!=-1){
            	editorType="clarkii";
            	imageObjects.push(objects[i]);
            }
        }
                
        	if(oieImages.length > 0)
        		saveOieImages();
		if(imageObjects.length>0){
	        	count=0;//setting instance counter
	        	saveClarkiiImages();
		}
     }
     
	//method to save clarkii4 instances
     function saveClarkiiImages(){
		if(count<imageObjects.length){
			var objEditor=imageObjects[count];
			if(!objEditor.getAsBase64){
				//if all clarkii imageditors dont get loaded properly we will hold the screen 
				//and dont do any saving. 
				return false;
			}
			var objId=objEditor.id;
			var inputName = objId.substring(clarkiiPrefix.length);  
			var fileName = obj.elements[inputName+"_file"].value;
			
			if(fileName.length>0){
				var fileExt=fileName.substring(fileName.lastIndexOf('.')+1);
				if(fileExt.length==0)
					fileExt='jpg'
			}
			
                var isDeleted = (fileName == '' || fileName.substr(fileName.length - 7) == 'deleted');
                if (!isDeleted) {
                    obj.elements['_DEL_'+inputName].value = '';
                    obj.elements[inputName+"_file"].value = fileName;                
			    objEditor.getAsBase64(fileExt,document.getElementById(inputName+"_BASE64JPEGQUALITY").value);
			    window.status='Saving '+fileName;
		     	showLoading();
                } else {
                    obj.elements['_DEL_'+inputName].value = 'on';
                    obj.elements[inputName+"_file"].value = "";
                    obj.elements[inputName].value = "";
			    count++;
			    saveClarkiiImages();
                }
			
		}else{
			window.status='Done';
			hideLoading();
			saveOther();
            }        
     	
        }        
                                                    
	//callback method from clarkii
	function onClarkiiSnapshot(dat){
		var objEditor=imageObjects[count];
		var objId=objEditor.id;
		var inputName = objId.substring(clarkiiPrefix.length);
		obj.elements[inputName].value = dat;
		count++;
		saveClarkiiImages();
        }        
	
     function saveOther(){
     	if(repostFlexContentFormVar){
     		if (obj.elements['doSubmit'].value=="yes")
			{
				repostContentForm();
     }
     
     	}else if(submitFlexContentFormVar){
			if (checkfields())
			{
				if (obj.elements['doSubmit'].value=="yes")
				{
					obj.submit();
				}
			}
			return false;
		     		
     	}
     }
     function startsWith(theString, theTerm) {
        return theString && (theString.substring(0, theTerm.length) == theTerm);
     }

	//method to save oie3 instances
	function saveOieImages(){
        // Image Editor
        for (var i = 0; i < oieImages.length; i++) {        
            var objId = oieImages[i].id; 
            var objEditor = oieImages[i];
            var inputName = objId.substring(oiePrefix.length);  
            var fileName = objEditor.OriginalFileName;

            var isDeleted = (fileName == '' || fileName.substr(fileName.length - 7) == 'deleted');
            if (!isDeleted) {
                obj.elements['_DEL_'+inputName].value = '';
                obj.elements[inputName+"_file"].value = fileName;                
                objEditor.GetAsBase64(fileName);                        
                obj.elements[inputName].value=objEditor.EncodedData;                               
            } else {
                obj.elements['_DEL_'+inputName].value = 'on';
                obj.elements[inputName+"_file"].value = "";
                obj.elements[inputName].value = "";
            }
        }
	}
function checkfields()
{
  var myindex=0;
]]> var nameField = '<STRING.STREAM VALUE="flexVariables.flextypes:name"/>'; <![CDATA[
    if (dojo.trim(obj.elements[nameField].value).length ==0 )
    {
        ]]>
        alert("<XLAT.STREAM KEY="dvin/Error/AT/Common/UniqueName" ESCAPE="true" ENCODE="false"/>");
        <![CDATA[

        myindex = indexOfElement(nameField);
        obj.elements[myindex].focus();
        return false;
    }
	
	var isclean = isCleanString(obj.elements[nameField].value);
	if (!isclean)
    {
        ]]>
        alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/Attributes/ApostropheNotAllowed" ESCAPE="true" ENCODE="false"/>");
        <![CDATA[
        myindex = indexOfElement(nameField);
        obj.elements[myindex].focus();
        return false;
    }

    if(!checktype()) {return false;}
    //if(!checkparents()) {return false;}
	if(!checkStartEndDateValidity()){return false;}
    return true;
}

function checktype()
{
  var AttrName="";
  var AttrInputName="";
  var AttrReq="";
  var AttrType="";
  var AttrInputType;
  var myindex=0;
  var eWebEditProEmpty = String.fromCharCode(60,112,62,160,60,47,112,62,13,10);
  var eWebEditProEmpty2 = String.fromCharCode(160,13,10);
  var num= obj.elements['numAttrs'].value;

  if (num!="0")
  {
      for (var i=num; i>0; i--)
      {
          var InfoIndex = 1;
          var InfoOffset = 0;
          NumReq="A"+(i)+"_RequireInfo";
          ValReq=obj.elements[NumReq].value;
          var NumValArray=ValReq.split("!");
          var ValArray=NumValArray[0].split("*"); ]]>
          <IF COND="Variables.cs_PropUseLegacyInputNames=false">
          <THEN>
              InfoIndex++;
              InfoOffset = 1;
          </THEN>
          </IF>
          <![CDATA[          
          AttrInputName=ValArray[1];
          AttrName=ValArray[InfoIndex++];
          AttrReq=ValArray[InfoIndex++];
          if (ValArray.length==(4+InfoOffset))
          {
              AttrType=ValArray[InfoIndex].substr(0,ValArray[InfoIndex].length);
              InfoIndex++;
              AttrInputType="text";
          }
          else
          {
              AttrType=ValArray[InfoIndex++];
              AttrInputType=ValArray[InfoIndex].substr(0,ValArray[InfoIndex].length);
              InfoIndex++;
          }

          var currentval;
          var basename;
          var numvalues=0;
          var actualvalues=0;
	  var deletedvalues=0;
          var valindex;
          if (AttrName!="GAProductSet")
          {
              numvalues=NumValArray.length-1;

              for (currentval=1;currentval<=numvalues;currentval++)
              { ]]>
                <IF COND="Variables.cs_PropUseLegacyInputNames=false">
                <THEN>
                  var TempArray=NumValArray[currentval-1].split("*");
                  AttrInputName=TempArray[1];
                </THEN>
                <ELSE>
                  if (currentval!=1)
                  {
                      if (currentval==2)
                      {
                          basename=AttrInputName.substring(1,AttrInputName.length);
                      }
                      AttrInputName=currentval+basename;
                  }
                </ELSE>
                </IF>
                  <![CDATA[
                  var content = ""; 
                  var isUrlOrBlob="false";
                  if (AttrType=="url" || AttrType=="blob" )
                  {
			isUrlOrBlob="true";
			//PR#19802.Check if the element is checkbox.If its a checkbox and it is unchecked with its value populated as 'on' then reset the value to ''
			if(typeof(obj.elements['_DEL_'+AttrInputName])!='undefined' && obj.elements['_DEL_'+AttrInputName].type=='checkbox' && !obj.elements['_DEL_'+AttrInputName].checked && obj.elements['_DEL_'+AttrInputName].value=='on')
				obj.elements['_DEL_'+AttrInputName].value = '';
                        if ((obj.elements[AttrInputName].value != "" &&
			     obj.elements[AttrInputName].value != eWebEditProEmpty &&
                             obj.elements[AttrInputName].value != eWebEditProEmpty2) ||
                            (typeof(obj.elements['_DATA_'+AttrInputName])!='undefined' &&
                                    obj.elements['_DATA_'+AttrInputName].value=="yes"))
			{
				if (!(typeof(obj.elements['_DEL_'+AttrInputName])!='undefined' &&
                                      obj.elements['_DEL_'+AttrInputName].value == 'on'))
					actualvalues++;
			}
                  }
                  else
                  {
                     
                      if (AttrType!="dateS")
                      {
                            content = obj.elements[AttrInputName].value;
                            if (AttrInputType!="text" && AttrInputType!="treepick")
                            {
                                if (AttrInputType=="select-one" || AttrInputType=="select-multiple")
                                {
                                    var special=obj.elements[AttrInputName];
                                    var specindex=0;
                                    for (specindex=0;specindex<special.length;specindex++)
                                    {
                                        if (special[specindex].selected)
                                            if (special[specindex].value!='')
                                                actualvalues++;
                                    }
                                }
                                else
                                {
                                    var special=obj.elements[AttrInputName];
                                    var specindex=0;
                                    for (specindex=0;specindex<special.length;specindex++)
                                    {
                                        if (special[specindex].checked)
                                            actualvalues++;
                                    }
                                }
                            }
                            else
                            {
                                var inputNodes = dojo.query('[name=' + AttrInputName + ']'),
									nodeArray = [];
								dojo.forEach(inputNodes, function(item){
									nodeArray.push(item);
								});	
								for (var nodeArrIndex = 0; nodeArrIndex < nodeArray.length ; nodeArrIndex++) {	
								  if (nodeArray[nodeArrIndex].value!="")
	                                    actualvalues++;                             
								}
                            }
                      }
                      else
                      {
                          if (obj.elements[AttrInputName+"year"].value!="" &&
                                obj.elements[AttrInputName+"month"].value!="" &&
                                obj.elements[AttrInputName+"day"].value!="" &&
                                obj.elements[AttrInputName+"hour"].value!="" &&
                                obj.elements[AttrInputName+"min"].value!="" &&
                                obj.elements[AttrInputName+"sec"].value!="")
                              actualvalues++;
                      }
                  }
              }
              AttrInputName=ValArray[1];
              for (currentval=1;currentval<=numvalues;currentval++)
              { ]]>
                <IF COND="Variables.cs_PropUseLegacyInputNames=false">
                <THEN>
                  var TempArray=NumValArray[currentval-1].split("*");
                  AttrInputName=TempArray[1];
                </THEN>
                <ELSE>
                  if (currentval!=1)
                  {
                          if (currentval==2)
                          {
                              basename=AttrInputName.substring(1,AttrInputName.length);
                          }
                          AttrInputName=currentval+basename;
                  }
                </ELSE>
                </IF>
                  <![CDATA[ 
                  
                  if (AttrReq=="ReqTrue")                   
                  {
                      if (AttrType!="dateS")
                      {
                          // if the content in ewebeditpro object is <p> nbsp :</p>
                          // or null and it is a required feild 
						  // Fix PR#20657. Here 'actualvalues' are no. of values for particular attribute which has been populated And the 'content' is the last value for that particular attribute. 
						  if (actualvalues==0 || ((content=="" || content==eWebEditProEmpty ||content==eWebEditProEmpty2) && isUrlOrBlob=="false" && actualvalues==0))
                          {
                                  ]]>
                                  var replacestr=/\bVariables.AttrName\b/   ;
                                  var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyAttrName" ENCODE="false" ESCAPE="true"/>' ;
                                  var newstr=xlatstr.replace(replacestr, AttrName) ;
                                  alert(newstr);
                                  <![CDATA[
                                  if (AttrInputType!='radio' && AttrInputType!='checkbox' && AttrInputType!='select-one' && AttrInputType!='select-multiple')
                                  {
                                      if (AttrInputType=="text" &&  typeof(obj.elements['_SHOW_'+AttrInputName])=='undefined')
                                      {
                                          myindex = indexOfElement(AttrInputName);
                                          // puts an alert in ewebeditpro object
                                          if (( typeof(eWebEditPro)!='undefined') && (eWebEditPro.instances[AttrInputName]))
					  {
                                              eWebEditPro[AttrInputName].focus();                                         
                                          }
					  else
					  {
                                              // puts alert in other form controls
                                              // this will check if object is valid and not hidden only then set the focus
                                              if ((obj.elements[myindex]) && (obj.elements[myindex].type!='hidden') && (obj.elements[myindex].style.display!='none'))
                                          	obj.elements[myindex].focus();
                                          }                                 
                                      }
                                      else
                                      {                                      
                                          myindex = indexOfElement('_SHOW_'+AttrInputName);
										  if ((obj.elements[myindex]) && (obj.elements[myindex].type!='hidden') && (obj.elements[myindex].style.display!='none'))
											obj.elements[myindex].focus();
                                      }                                  
                                  }
                                  return false;
                          }
                          else
                          {
                                if (AttrInputType=="text")
                                {
                               		var node,
										nodes = dojo.query('[name=' + AttrInputName + ']'),
										nodeArray = [];
									dojo.forEach(nodes, function(item){
										nodeArray.push(item);
									});	
									for (var nodeIndex = 0; nodeIndex < nodeArray.length ; nodeIndex++) {	
									  if (!checkinputtype(AttrName,AttrInputName,AttrType,nodeArray[nodeIndex].value))
										  return false;
									}
                                }
                                else if (AttrInputType=="treepick")
                                {
				    var valindex;
                                    var treePickVals=obj.elements[AttrInputName].value.split(";");
                                    for (valindex=0;valindex<treePickVals.length;valindex++)
                                    {
                                        if (!checkinputtype(AttrName,AttrInputName,AttrType,treePickVals[valindex]))
                                            return false;
                                    }
                                }
                                else if (AttrInputType=="select-one" || AttrInputType=="select-multiple")
                                {
				    var valindex;

                                    for (valindex=0;valindex<obj.elements[AttrInputName].length;valindex++)
                                    {
                                        if (obj.elements[AttrInputName][valindex].selected)
                                        {
                                            if (!checkinputtype(AttrName,AttrInputName,AttrType,obj.elements[AttrInputName][valindex].value))
                                                return false;
                                        }
                                    }
				}
                                else
                                {
				    var valindex;
                                    for (valindex=0;valindex<obj.elements[AttrInputName].length;valindex++)
                                    {
                                        if (obj.elements[AttrInputName][valindex].checked)
                                        {
                                            if (!checkinputtype(AttrName,AttrInputName,AttrType,obj.elements[AttrInputName][valindex].value))
                                                return false;
                                        }
                                    }
                                }
                          }
                      }
    
                      else if (AttrType=="dateS")
                      {
                          var Cyear=AttrInputName+"year";
                          var Cmonth=AttrInputName+"month";
                          var Cday=AttrInputName+"day";
                          var Chour=AttrInputName+"hour";
                          var Cmin=AttrInputName+"min";
                          var Csec=AttrInputName+"sec";
    
                          if (obj.elements[Cyear].value!="" || obj.elements[Cmonth].value!="" || obj.elements[Cday].value!="" || obj.elements[Chour].value!="" || obj.elements[Cmin].value!="" || obj.elements[Csec].value!="")
                          {
    
                              if (obj.elements[Cyear].value=="")
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyYear" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Cyear].focus();
                                  return false;
                              }
                              else
                              {
                                  var DateYear= Cyear+"Y";
                                  if (!checkinputtype(DateYear,AttrInputName,AttrType,null))
                                  {
                                      ]]>
                                      alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightYear" ESCAPE="true" ENCODE="false"/>" );
                                      <![CDATA[
                                      obj.elements[Cyear].focus();
                                      return false;
                                  }
                              }
                              if (obj.elements[Cmonth].value=="")
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyMonth" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Cmonth].focus();
                                  return false;
                              }
                              else
                              {
                                  var DateMonth= Cmonth+"M";
                                  if (!checkinputtype(DateMonth,AttrInputName,AttrType,null))
                                  {
                                      ]]>
                                      alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightMonth" ESCAPE="true" ENCODE="false"/>" );
                                      <![CDATA[
                                      obj.elements[Cmonth].focus();
                                      return false;
                                  }
                              }
                              if (obj.elements[Cday].value=="")
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyDay" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Cday].focus();
                                  return false;
                              }
                              else
                              {
                                  var DateDay= Cday+"D";
                                  if (!checkinputtype(DateDay,AttrInputName,AttrType,null))
                                  {
                                      ]]>
                                      alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightDay" ESCAPE="true" ENCODE="false"/>" );
                                      <![CDATA[
                                      obj.elements[Cday].focus();
                                      return false;
                                  }
                              }
                              if (obj.elements[Chour].value=="")
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyHour" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Chour].focus();
                                  return false;
                              }
                              else
                              {
                                  var DateHour= obj.elements[Chour].value;
                                  if (!IsInt(DateHour))
                                  {
                                      ]]>
                                      alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightHour" ESCAPE="true" ENCODE="false"/>" );
                                      <![CDATA[
                                      obj.elements[Chour].focus();
                                      return false;
                                  }
                              }
                              if (obj.elements[Cmin].value=="")
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyMin" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Cmin].focus();
                                  return false;
                              }
                              else
                              {
                                  var DateMin= obj.elements[Cmin].value;
                                  if (!IsInt(DateMin))
                                  {
                                      ]]>
                                      alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightMin" ESCAPE="true" ENCODE="false"/>" );
                                      <![CDATA[
                                      obj.elements[Cmin].focus();
                                      return false;
                                  }
                              }
                              if (obj.elements[Csec].value=="")
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifySec" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Csec].focus();
                                  return false;
                              }
                              else
                              {
                                  var DateSec= obj.elements[Csec].value;
                                  if (!IsInt(DateSec))
                                  {
                                      ]]>
                                      alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightSec" ESCAPE="true" ENCODE="false"/>" );
                                      <![CDATA[
                                      obj.elements[Csec].focus();
                                      return false;
                                  }
                              }
                          }
    
                          if (actualvalues==0)
                          {
                              ]]>
                                
                              var replacestr=/\bVariables.AttrName\b/   ;
                              var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyAttrName" ENCODE="false" ESCAPE="true"/>' ;
                              var newstr=xlatstr.replace(replacestr, AttrName) ;
                              alert(newstr);

                              <![CDATA[
                              return false;
                          }
                      }
                  }
                 
                  if (AttrReq!="ReqTrue")
                  {
                  
                      if (AttrType!="dateS")
                      {
                          if (actualvalues!=0)
                          {
                                
                              if (AttrInputType=="text")
                              {
                                  	var node,
									nodes = dojo.query('[name=' + AttrInputName + ']'),
									nodeArray = [];
									dojo.forEach(nodes, function(item){
										nodeArray.push(item);
									});	
									for (var nodeIndex = 0; nodeIndex < nodeArray.length ; nodeIndex++) {	
									  if (!checkinputtype(AttrName,AttrInputName,AttrType,nodeArray[nodeIndex].value))
										  return false;
									}
                              }
                              else if (AttrInputType=="treepick")
                              {
                                  var valindex;

                                  var treePickVals=obj.elements[AttrInputName].value.split(";");
                                  for (valindex=0;valindex<treePickVals.length;valindex++)
                                  {
                                      if (!checkinputtype(AttrName,AttrInputName,AttrType,treePickVals[valindex]))
                                          return false;
                                  }
                              }
                              else if (AttrInputType=="select-one" || AttrInputType=="select-multiple")
                              {
                                  var valindex;

                                  for (valindex=0;valindex<obj.elements[AttrInputName].length;valindex++)
                                  {
                                      if (obj.elements[AttrInputName][valindex].selected)
                                      {
                                          if (!checkinputtype(AttrName,AttrInputName,AttrType,obj.elements[AttrInputName][valindex].value))
                                              return false;
                                      }
                                  }
                              }
                              else
                              {
                                  var valindex;

                                  for (valindex=0;valindex<obj.elements[AttrInputName].length;valindex++)
                                  {
                                      if (obj.elements[AttrInputName][valindex].checked)
                                      {
                                          if (!checkinputtype(AttrName,AttrInputName,AttrType,obj.elements[AttrInputName][valindex].value))
                                              return false;
                                      }
                                  }
                              }
                          }
                      }
    
                      else if (AttrType=="dateS")
                      {
                          var Cyear=AttrInputName+"year";
                          var Cmonth=AttrInputName+"month";
                          var Cday=AttrInputName+"day";
                          var Chour=AttrInputName+"hour";
                          var Cmin=AttrInputName+"min";
                          var Csec=AttrInputName+"sec";
    
                          if (obj.elements[Cyear].value!="" && obj.elements[Cmonth].value!="" && obj.elements[Cday].value!="" && obj.elements[Chour].value!="" && obj.elements[Cmin].value!="" && obj.elements[Csec].value!="")
                          {
                              var DateYear= Cyear+"Y";
                              var DateMonth= Cmonth+"M";
                              var DateDay= Cday+"D";
                              var DateHour= obj.elements[Chour].value;
                              var DateMin= obj.elements[Cmin].value;
                              var DateSec= obj.elements[Csec].value;
    
    
                              if (!checkinputtype(DateYear,AttrInputName,AttrType,null))
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightYear" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Cyear].focus();
                                  return false;
                              }
                              if (!checkinputtype(DateMonth,AttrInputName,AttrType,null))
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightMonth" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Cmonth].focus();
                                  return false;
                              }
                              if (!checkinputtype(DateDay,AttrInputName,AttrType,null))
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightDay" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Cday].focus();
                                  return false;
                              }
    
                              if (!IsInt(DateHour))
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightHour" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Chour].focus();
                                  return false;
                              }
                              if (!IsInt(DateMin))
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightMin" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Cmin].focus();
                                  return false;
                              }
                              if (!IsInt(DateSec))
                              {
                                  ]]>
                                  alert("<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/SpecifyRightSec" ESCAPE="true" ENCODE="false"/>" );
                                  <![CDATA[
                                  obj.elements[Csec].focus();
                                  return false;
                              }
                          }
                      }
    
                  }
              }
           }
      }
      var passwordString=obj.myPasswordAttrs.value;
      if (passwordString!='none')
      {
          var PasswordFieldArray = passwordString.split(';');
          var currentAttrName, currentInputName, passwordIndex;
          for (passwordIndex = 0; passwordIndex < PasswordFieldArray.length; passwordIndex +=2)
          {
              currentInputName = PasswordFieldArray[passwordIndex];
              currentAttrName = PasswordFieldArray[passwordIndex+1];
              
              if (obj.elements[currentInputName].value!=obj.elements['Confirm'+currentInputName].value)
              {
                  ]]>
                  var replacestr=/\bVariables.AttrName\b/   ;
                  var xlatstr= '<XLAT.STREAM KEY="dvin/FlexibleAssets/FlexAssets/ConfirmFailed" ENCODE="false" ESCAPE="true"/>' ;
                  var newstr=xlatstr.replace(replacestr, currentAttrName) ;
                  alert(newstr);
                  <![CDATA[
                  return false;
              }
          }
      }

  }
  
  return true;
}

function popupCallBack()
{
    selAllAll();
}
]]>
</SCRIPT>
</ftcs>

