<?xml version="1.0" ?>
<!DOCTYPE FTCS SYSTEM "futuretense_cs.dtd">
<FTCS Version="1.1">
<!-- OpenMarket/Gator/Scripts/ValidateFields
--
-- INPUT
-     PType,PName,PConstrainttype,PLength,PLowerrange,PUpperrange,PDefaultval,PmyEnumValue
-- OUTPUT
-- DESCRIPTION:
-- 1.You should parse the value for input variables. If they are empty, please set value "null" for them.
-- 2.Please add two functions(Description()& Category()) in the code which call this ValidateFields.xml.   
-->
<!--
 [2007-09-12 KG]
 * added XSS scripting fixes (adapted from 6.3 fixes); search for isCleanString
 * changed definitions of 'obj' to just forms[0] (not .elements[0])
 * added CDATA tags where appropriate.
 [2007-10-09 KG]
 * XSS revision: minimized set of restricted characters.
-->
<CALLELEMENT NAME="OpenMarket/Xcelerate/Scripts/FormatDate" />
<CALLELEMENT NAME="OpenMarket/Xcelerate/Scripts/ValidateInputForXSS" />
<SCRIPT LANGUAGE="JavaScript">
<![CDATA[
function checkdata(Type,EnumValue,Elength)
{					 
	var obj = document.forms[0];
	if(obj.elements[Type].selectedIndex)
		var type= obj.elements[Type][obj.elements[Type].selectedIndex].value;
	else
		var type= obj.elements[Type].value;
		
	 if(obj.elements[EnumValue].value=="")
			 {
				 alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyanvalueE" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[EnumValue].focus();
					return false;
			 }

	 if ( type=="string") 
				{ 
	  		 if(obj.elements[Elength].value=="")
				 {
					alert("]]><XLAT.STREAM KEY="dvin/UI/ErrorspecifyanSTRINGLENGTHE" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[Elength].focus();
					return false;	
				 }
				 
				 if(!IsNumber(obj.elements[Elength].value))
					{	
						alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyanSTRINGLENGTHasNumberE" ESCAPE="true" ENCODE="false"/><![CDATA[");
						obj.elements[Elength].focus();
						return false;	
					}	
					
				 if(IsNumber(obj.elements[Elength].value))
					{ 
					 obj.elements[Elength].value= parseInt(obj.elements[Elength].value,10); 
					 if(obj.elements[Elength].value>0 && 256>obj.elements[Elength].value) {}
					 else
					 {
						alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyanSTRINGLENGTHbetween0and255E" ESCAPE="true" ENCODE="false"/><![CDATA[");
						obj.elements[Elength].focus();
						return false;	
					 }
          }
				    
   			 if (obj.elements[EnumValue].value.length > parseInt(obj.elements[Elength].value))
					 { 
                        var replacestr=/\bVariables.value\b/ ;
                        var xlatstr= ']]><XLAT.STREAM KEY="dvin/UI/Error/lengthnolongerthanElengthvalueE" ENCODE="false" ESCAPE="true"/><![CDATA[' ;
                        alert(xlatstr.replace(replacestr, parseInt(obj.elements[Elength].value)));
 						obj.elements[EnumValue].focus();
						return false;
					 }
				}
				
	   if(type=="int")
			{
				if(!IsInt(obj.elements[EnumValue].value))
				{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifythevalueasINTEGERE" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[EnumValue].focus();
				return false;}

				if(!IsInteger(obj.elements[EnumValue].value))
				{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetweenn65535and65535E" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[EnumValue].focus();
				return false;}
			}
		
		 if(type=="short")
			{
				if(!IsInt(obj.elements[EnumValue].value))
				{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifythevalueasSHORTINTEGERE" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[EnumValue].focus();
				return false;}
				
				if(!IsShort(obj.elements[EnumValue].value))
				{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetween0AA255E" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[EnumValue].focus();
				return false;}
			}
			
		 if(type=="long")
			{
			 if(!IsInt(obj.elements[EnumValue].value))
				{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifythevalueasLONGINTEGERE" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[EnumValue].focus();
				return false;}
				
			 if(!IsLong(obj.elements[EnumValue].value))
				{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetweenn65535and65535E" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[EnumValue].focus();
				return false;}
			}	
    		  
										
		 if(type=="double")
		 {
			if(!IsNumber(obj.elements[EnumValue].value))
				{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifythevalueasFLOATE" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[EnumValue].focus();
				return false;}
     }	
						
		 if(type=="timestamp")
		 {
			if(!IsDate(obj.elements[EnumValue].value))
			{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/Datesenteredfollowingformatyyyymmddhhmmsss" ENCODE="false" ESCAPE="true"/><![CDATA[");
			obj.elements[EnumValue].focus();
			return false;}
			
			if(!IsDateNumber(obj.elements[EnumValue].value))
			{
			obj.elements[EnumValue].focus();
			return false;}
		 }		

				return true;

}

function checkfields(PType,PName,PConstrainttype,PLength,PLowerrange,PUpperrange,PDefaultval,PmyEnumValue)
{ 	
	var obj = document.forms[0];
	if(obj.elements[PType].selectedIndex)
		var type= obj.elements[PType][obj.elements[PType].selectedIndex].value;
	else
		var type= obj.elements[PType].value;
	
	]]><!-- to check the 'Name:'	Column, make sure the input is not null!--><![CDATA[
	if (obj.elements[PName].value=="")
	{
		alert("]]><XLAT.STREAM KEY="dvin/Error/AT/Common/UniqueName" ESCAPE="true" ENCODE="false"/><![CDATA[");
		obj.elements[PName].focus();
		return false;
	}
	var isclean = isCleanString(obj.elements[PName].value, '<">', true);	
	if (!isclean) {
		alert("]]><XLAT.STREAM KEY="dvin/FlexibleAssets/Attributes/ApostropheNotAllowedMinimal" ESCAPE="true" ENCODE="false"/><![CDATA[");
			obj.elements[PName].focus();
		return false;
	}
	
	if(!checkStartEndDateValidity()) {
		return false;
	}
	
 if(!Description()){
 return false;
 }
 
 if(!Category()){
 return false;
 }
 
	]]><!-- to check the 'Type:' Column!--><![CDATA[
	if ( type=="string") 
  {			
		
		if(obj.elements[PLength].value=="")
				 {
					alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyanSTRINGLENGTHasNumberE" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[PLength].focus();
					return false;	
				 }

		
		if(!IsNumber(obj.elements[PLength].value))
					{	
						alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyanSTRINGLENGTHasNumberE" ESCAPE="true" ENCODE="false"/><![CDATA[");
						obj.elements[PLength].focus();
						return false;	
					}	

		if(IsNumber(obj.elements[PLength].value))
		{ 
		 obj.elements[PLength].value= parseInt(obj.elements[PLength].value,10); 
		 if(obj.elements[PLength].value>0 && 256>obj.elements[PLength].value) {}
		 else
		 {
			alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyanSTRINGLENGTHbetween0and255E" ESCAPE="true" ENCODE="false"/><![CDATA[");
			obj.elements[PLength].focus();
			return false;	
		 }
    }
  }

 	]]><!-- to check if the PLowerrange, PUpperrange and PmyEnumValue Column are empty!--><![CDATA[
  if(obj.elements[PLowerrange])  
	{ 			
      if(obj.elements[PLowerrange].value=="")
				{
				alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheLowerrangelimitE" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[PLowerrange].focus();
				return false;
				}
  }
	
	if(obj.elements[PUpperrange]) 
	{
			if(obj.elements[PUpperrange].value=="")
				{
				alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheUpperrangelimitE" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[PUpperrange].focus();
				return false;
				}
			 
	}
	if(obj.elements[PmyEnumValue]) 
	{            
	 		if(obj.elements[PmyEnumValue].options.length==0)
			{
				alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyatleastoneenumerationvalueE" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[PmyEnumValue].focus();
				return false;
			}
			if(obj.elements[PmyEnumValue].options.length!=0 && obj.elements[PmyEnumValue].options[0].value=="-1")
			{
				alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyatleastoneenumerationvalueE" ESCAPE="true" ENCODE="false"/><![CDATA[");
				obj.elements[PmyEnumValue].focus();
				return false;
			}
  }	
	
	]]><!-- to check the Lowerrange and Upperrange are validation for type selected!--><![CDATA[
	if(obj.elements[PLowerrange] && obj.elements[PUpperrange])
				{
          if(type=="int")
						{
							if(!IsInt(obj.elements[PLowerrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyLowerrangelimitValueasINTtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PLowerrange].focus();
							return false;	}	
						 
						  if(!IsInt(obj.elements[PUpperrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyUpperrangelimitValueasINTtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;}
							
							if(!IsInteger(obj.elements[PLowerrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetweenn65535and65535E" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PLowerrange].focus();
							return false;	}	
						 
						 if(!IsInteger(obj.elements[PUpperrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetweenn65535and65535E" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;}
						if(parseInt(obj.elements[PUpperrange].value) < 0)
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyUpperrangelimitValueasPositiveNum" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							
						if(parseInt(obj.elements[PLowerrange].value) < 0)
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyLowerrangelimitValueasPositiveNum" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							
							
						if(parseInt(obj.elements[PUpperrange].value) < parseInt(obj.elements[PLowerrange].value))
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/LowerUpperrangelimitDiff" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							}


						
				  if(type=="short")
						{
						 if(!IsInt(obj.elements[PLowerrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyLowerrangelimitValueasSHORTINTtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PLowerrange].focus();
							return false;	}	
						 
						 if(!IsInt(obj.elements[PUpperrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyUpperrangelimitValueasSHORTINTtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;}

						 if(!IsShort(obj.elements[PLowerrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetween0AA255E" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PLowerrange].focus();
							return false;	}	
						 
						 if(!IsShort(obj.elements[PUpperrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetween0AA255E" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;}
							
							if(parseInt(obj.elements[PUpperrange].value) < 0)
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyUpperrangelimitValueasPositiveNum" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							
						if(parseInt(obj.elements[PLowerrange].value) < 0)
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyLowerrangelimitValueasPositiveNum" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							
						if(parseInt(obj.elements[PUpperrange].value) < parseInt(obj.elements[PLowerrange].value))
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/LowerUpperrangelimitDiff" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
						}
						
					if(type=="long")
						{
						 if(!IsInt(obj.elements[PLowerrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyLowerrangelimitValueasLONGINTtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PLowerrange].focus();
							return false;	}	
						 
						 if(!IsInt(obj.elements[PUpperrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyUpperrangelimitValueasLONGINTtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;}
							
						 if(!IsLong(obj.elements[PLowerrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetweenn65535and65535E" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PLowerrange].focus();
							return false;	}	
						 
						 if(!IsLong(obj.elements[PUpperrange].value))
							{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetweenn65535and65535E" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;}
						if(parseInt(obj.elements[PUpperrange].value) < 0)
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyUpperrangelimitValueasPositiveNum" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							
						if(parseInt(obj.elements[PLowerrange].value) < 0)
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyLowerrangelimitValueasPositiveNum" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							
						if(parseInt(obj.elements[PUpperrange].value) < parseInt(obj.elements[PLowerrange].value))
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/LowerUpperrangelimitDiff" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
						}
      		
					if(type=="double")
					  {
             if(!IsNumber(obj.elements[PLowerrange].value))
								{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyLowerrangelimitValueasFLOATtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
								obj.elements[PLowerrange].focus();
								return false;	}	
               
						 if(!IsNumber(obj.elements[PUpperrange].value))
								{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyUpperrangelimitValueasFLOATtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
								obj.elements[PUpperrange].focus();
								return false;}
							if(parseInt(obj.elements[PUpperrange].value) < 0)
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyUpperrangelimitValueasPositiveNum" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							
						if(parseInt(obj.elements[PLowerrange].value) < 0)
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyLowerrangelimitValueasPositiveNum" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
							if(parseInt(obj.elements[PUpperrange].value) < parseInt(obj.elements[PLowerrange].value))
							{
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/LowerUpperrangelimitDiff" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PUpperrange].focus();
							return false;
							}
						}			
						
						if(type=="timestamp")
						{
							if(!IsDate(obj.elements[PLowerrange].value))
								{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/Datesenteredfollowingformatyyyymmddhhmmsss" ENCODE="false" ESCAPE="true"/><![CDATA[");
								obj.elements[PLowerrange].focus();
								return false;	}	
												
						  if(!IsDate(obj.elements[PUpperrange].value))
								{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/Datesenteredfollowingformatyyyymmddhhmmsss" ENCODE="false" ESCAPE="true"/><![CDATA[");
								obj.elements[PUpperrange].focus();
								return false;}
								
							if(!IsDateNumber(obj.elements[PLowerrange].value))
								{
								obj.elements[PLowerrange].focus();
								return false;	}	
								
							if(!IsDateNumber(obj.elements[PUpperrange].value))
								{
								obj.elements[PUpperrange].focus();
								return false;}
								
						 if(DateCompare(obj.elements[PLowerrange].value,obj.elements[PUpperrange].value))
						 {
						 alert("]]><XLAT.STREAM KEY="dvin/UI/Error/LowerUpperrangelimitDiff" ESCAPE="true" ENCODE="false"/><![CDATA[");
								obj.elements[PUpperrange].focus();
								return false;
						 }
						}	
			  }
	
]]>
<!-- to check the 'Default Value:'	Column when this column is not null! Check validation for RANGE or ENUMERATION-->
<![CDATA[
	if(obj.elements[PDefaultval])
	{   
				if(obj.elements[PDefaultval].value=="")
				{
				alert("You should specify the 'default Value'!");
				obj.elements[PDefaultval].focus();
				return false;
				}  
				if ( type=="string") 
				{
			
					if(obj.elements[PLength].value!="")
					{
					  var lengthRequired=parseInt(obj.elements[PLength].value);
					  var lengthEntered=parseInt(obj.elements[PDefaultval].value.length);
					       
						   if (lengthEntered>lengthRequired)
						   {
						   alert("]]><XLAT.STREAM KEY="dvin/UI/Error/defaultValuelengthlessthenallowedE" ESCAPE="true" ENCODE="false"/><![CDATA[");
						   obj.elements[PDefaultval].focus();
						    return false;
						   }
						 
					}
				}
				if(type=="int")
				{
					if(!IsInt(obj.elements[PDefaultval].value))
					{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifydefaultValueINTEGERtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[PDefaultval].focus();
					return false;}

					if(!IsInteger(obj.elements[PDefaultval].value))
					{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetweenn65535and65535E" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[PDefaultval].focus();
					return false;}
				}
				
				if(type=="short")
				{
				
					if(!IsInt(obj.elements[PDefaultval].value))
					{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifydefaultValueSHORTINTEGERtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[PDefaultval].focus();
					return false;}

					if(!IsShort(obj.elements[PDefaultval].value))
					{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetween0AA255E" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[PDefaultval].focus();
					return false;}
				}
				
				if(type=="long")
				{	
					if(!IsInt(obj.elements[PDefaultval].value))
					{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifydefaultValueLONGINTEGERtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[PDefaultval].focus();
					return false;}
					
					if(!IsLong(obj.elements[PDefaultval].value))
					{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifytheINTEGERvaluebetweenn65535and65535E" ESCAPE="true" ENCODE="false"/><![CDATA[");
					obj.elements[PDefaultval].focus();
					return false;}
				}
				if(type=="double")
				{
					if(!IsNumber(obj.elements[PDefaultval].value))
						{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifydefaultValueFLOATtryagainE" ESCAPE="true" ENCODE="false"/><![CDATA[");
								obj.elements[PDefaultval].focus();
								return false;}
            }								
				if(type=="timestamp")
						{   if(!IsDate(obj.elements[PDefaultval].value))
								{alert("]]><XLAT.STREAM KEY="dvin/UI/Error/Datesenteredfollowingformatyyyymmddhhmmsss" ENCODE="false" ESCAPE="true"/><![CDATA[");
								obj.elements[PDefaultval].focus();
								return false;}
								
								if(!IsDateNumber(obj.elements[PDefaultval].value))
								{
								obj.elements[PDefaultval].focus();
								return false;} 
						}	
]]>
				<!-- to check Whether the value of Default Value is between Lowerrange and Upperrange	Column! in RANGE-->
				<!-- to check Whether the values are INTEGER, LONG, SHORT INTEGER-->
<![CDATA[
				if(obj.elements[PLowerrange] && obj.elements[PUpperrange])
				{
					 if(type=="int" || type=="long" || type=="short")
						{
						 var DefaultVal=parseInt(obj.elements[PDefaultval].value);
						 var LowVal=parseInt(obj.elements[PLowerrange].value);
						 var UpperVal=parseInt(obj.elements[PUpperrange].value);
						 
						 if(DefaultVal>UpperVal || LowVal>DefaultVal)
							{	
							 alert("]]><XLAT.STREAM KEY="dvin/UI/Error/setdefaultvaluebetweenLowerUpperrangelimitE" ESCAPE="true" ENCODE="false"/><![CDATA[");
							 obj.elements[PDefaultval].focus();
							 return false;	
							}	
						}
]]>
					 <!-- to check Whether the values are DOUBLE-->
<![CDATA[
					 if(type=="double")
					  {
             var DefaultVal=parseFloat(obj.elements[PDefaultval].value);
						 var LowVal=parseFloat(obj.elements[PLowerrange].value);
						 var UpperVal=parseFloat(obj.elements[PUpperrange].value);
						 
						 if(DefaultVal>UpperVal || LowVal>DefaultVal)
								{	
								 alert("]]><XLAT.STREAM KEY="dvin/UI/Error/setdefaultvaluebetweenLowerUpperrangelimitE" ESCAPE="true" ENCODE="false"/><![CDATA[");
								 obj.elements[PDefaultval].focus();
								 return false;	
								}
					  }   
						
					 if(type=="timestamp")
					 {
						 var DefaultVal=obj.elements[PDefaultval].value;
						 var LowVal=obj.elements[PLowerrange].value;
						 var UpperVal=obj.elements[PUpperrange].value;
																																	
						 if(DateCompare(DefaultVal,UpperVal)|| DateCompare(LowVal,DefaultVal))
						 {	
								alert("]]><XLAT.STREAM KEY="dvin/UI/Error/setdefaultvaluebetweenLowerUpperrangelimitE" ESCAPE="true" ENCODE="false"/><![CDATA[");
								obj.elements[PDefaultval].focus();
								return false;	
						 }
					 }	
	 			}
]]>
				<!-- to check Whether the value of Default Value is one of the enumeration Column!-->
<![CDATA[
			  if(obj.elements[PmyEnumValue])
				{ 
					var EnumVal= obj.elements[PmyEnumValue];
					var result="fal";  
          if(obj.elements[PmyEnumValue].options.length!=0 && obj.elements[PmyEnumValue].options[0].value!="-1")
					{
						for (i=obj.elements[PmyEnumValue].options.length-1; i>=0; i--)
						{ 
							if (EnumVal.options[i].value==obj.elements[PDefaultval].value)
							result="true";
            }
						if(result=="fal")
						{	  
							alert("]]><XLAT.STREAM KEY="dvin/UI/Error/selectdefaultvaluefromtheLegalvaluesE" ESCAPE="true" ENCODE="false"/><![CDATA[");
							obj.elements[PDefaultval].focus();
							return false;	
						}	   	
					else result="fal";   
					}
			 }
		}	]]><!-- Default value checking ended--><![CDATA[
 	 	
	obj.submit();
	return false;
}

function IsInt(str) {
	/* strip leading zeroes to prevent false negative! */
	while (str.charAt(0) == '0' && str.length > 1) str = str.substr(1);
	var i = parseInt(str);
	if (isNaN(i))
		return false;
	i = i.toString();
	if (i != str)
		return false;
	return true;
}
/*
]]>
<!-- to check if the string is belong to the 'Integer'!-->
<![CDATA[
function IsInt(StrVar)
{
	var Test="T"; 		 
	for(i=StrVar.length-1; i>=0; i--)
	{ 	 
	 	var Flag="F";
		if(i==0)
		{ 
		 if(StrVar.charAt(0)=="-")
		 {
		 Flag="T";
		 }
		 else
		 {
		  for(j=9;j>=0; j--)
				{
				if(StrVar.charAt(0)==j)
					{
					 Flag="T";
					 break;
					}
				}	
		 }
		}
		else
		{
			for(j=9;j>=0; j--)
				{
				 if(StrVar.charAt(i)==j)
					{
					 Flag="T";
					 break;
					}
				}
		}
 		if(Flag=="F"){Test="F"; break;}
	}
 if(Test=="F") return false;
 else return true;	
}
*/
]]>
<!-- to check if the string is the 'Integer'!-->
<![CDATA[
function IsInteger(StrVar)
{
 var Test="T"; 		
 var StrNum=parseInt(StrVar);
 if(IsInt(StrVar))
 {
  if(StrNum >=-65535 && 65535 >= StrNum)
   return true;
	else 
	 return false; 
 }
 else
  return false; 
}
]]>
<!-- to check if the string is the 'Short'!-->
<![CDATA[
function IsShort(StrVar)
{
 var Test="T"; 		
 var StrNum=parseInt(StrVar);
 if(IsInt(StrVar))
 {
  if(StrNum >= 0 && 255 >= StrNum)
   return true;
	else 
	 return false; 
 }
 else
  return false; 
}
]]>
<!-- to check if the string is the 'Long'!-->
<![CDATA[
function IsLong(StrVar)
{
 var Test="T"; 		
 var StrNum=parseInt(StrVar);
 if(IsInt(StrVar))
 {
  if(StrNum >= -65535 && 65535 >= StrNum)
   return true;
	else 
	 return false; 
 }
 else
  return false; 
}
]]>
<!-- to check if the string is the 'Float'!-->
<![CDATA[
function IsNumber(str)
{
    return /^[-+]?\d*((\.\d+)([eE][-+]?\d+)?)?$/.test(str);
}
/*
function IsNumber(StrVar)
{
 var loopEnd = 0;
        if (StrVar.charAt(0) == "-")
            loopEnd = 1;

        var countDecimalPoint = 0;
        var countE = 0;
        var Test="T";
        for(i=StrVar.length-1; i>=loopEnd; i--)
            {
                var Flag="F";
                if(StrVar.charAt(i)==".")
                {
                    countDecimalPoint++;
                    Flag="T";
                    continue;
                }
                if(StrVar.charAt(i)=="E" || StrVar.charAt(i)=="e")
                {
                    countE++;
                    Flag="T";
                    continue;
                }
                for(j=9;j>=0; j--)
                {
                    if(StrVar.charAt(i)==j)
                    {
                     Flag="T";
                     break;
                    }
                }
                if(Flag=="F" || countDecimalPoint > 1 || countE > 1)
                    {
                    Test="F"; break;
                    }
            }
         if(Test=="F") return false;
         else return true;
}*/	 
]]>
<!-- to check if the string is the 'Date'!-->
<![CDATA[
function IsDate(StrVar)
{
 var Test="T";
 var lastNum=StrVar.length-1;
  	
 if(21>StrVar.length){Test="F";}
  
 if(StrVar.length>=21)
 { 
  if(StrVar.charAt(4)!="-" || StrVar.charAt(7)!="-" || StrVar.charAt(10)!=" " || StrVar.charAt(13)!=":" || StrVar.charAt(16)!=":" || StrVar.charAt(19)!=".") {Test="F";}
	else if(!IsInt(StrVar.substring(0,4))){Test="F";}
	else if(!IsInt(StrVar.substring(5,7))){Test="F";}
	else if(!IsInt(StrVar.substring(8,10))){Test="F";}
	else if(!IsInt(StrVar.substring(11,13))){Test="F";}
	else if(!IsInt(StrVar.substring(14,16))){Test="F";}
	else if(!IsInt(StrVar.substring(17,19))){Test="F";}
	else if(!IsInt(StrVar.charAt(20))){Test="F";}
 }
 if(Test=="T"){return true;}
 if(Test=="F"){return false;}		
}
]]>
<!--to check the day, month, hour, minute and second number  -->
<![CDATA[
function IsDateNumber(StrVar)
{			
 var lastNum=StrVar.length-1;
 	
 if(StrVar.substring(5,7)>12 || 0>StrVar.substring(5,7))
  {alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyMonthNumberbetween0and12E" ESCAPE="true" ENCODE="false"/><![CDATA[");
	 return false;
	}
 
 if(StrVar.substring(8,10)>31 || 0>StrVar.substring(8,10))
  {alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyDayNumberbetween0and31E" ESCAPE="true" ENCODE="false"/><![CDATA[");
	 return false;
	}
 
 if(StrVar.substring(11,13)>23 || 0>StrVar.substring(11,13))
  {alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyHourNumberbetween0and23E" ESCAPE="true" ENCODE="false"/><![CDATA[");
	 return false;
	} 
 
 if(StrVar.substring(14,16)>59 || 0>StrVar.substring(14,16))
  {alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifyMinuteNumberbetween0and59E" ESCAPE="true" ENCODE="false"/><![CDATA[");
	 return false;
	}
	
 if(StrVar.substring(17,19)>59 || 0>StrVar.substring(17,19))
  {alert("]]><XLAT.STREAM KEY="dvin/UI/Error/specifySecondNumberbetween0and59E" ESCAPE="true" ENCODE="false"/><![CDATA[");
	 return false;
	}
 
 return true;

}

]]>
<!-- to compare the 'Date', if the Str1 biger than Str2 return 'true', else return 'false'!-->
<![CDATA[
function DateCompare(Str1,Str2)
{	
 var Data1=Str1.substring(0,4);
 var Data2=Str2.substring(0,4);
 var DInt1=parseInt(Data1);
 var DInt2=parseInt(Data2);
 if(DInt1 > DInt2){return true;}
 if(DInt1 == DInt2)
 {      
	 Data1=Str1.substring(5,7);
	 Data2=Str2.substring(5,7);
	 DInt1=parseInt(Data1);
	 DInt2=parseInt(Data2);
	 if(DInt1 >DInt2){return true;}
	 if(DInt1 == DInt2)
	 {          
	  Data1=Str1.charAt(8);
		Data2=Str2.charAt(8);
	 	DInt1=parseInt(Data1);
		DInt2=parseInt(Data2);
    if(DInt1 > DInt2){return true;}
		if(DInt1 == DInt2)
		{
			Data1=Str1.charAt(9);
			Data2=Str2.charAt(9);
			DInt1=parseInt(Data1);
			DInt2=parseInt(Data2);
			if(DInt1 > DInt2){return true;}
			if(DInt1 == DInt2){return false;}
			if(DInt2 > DInt1){return false;}
    }
		if(DInt2 > DInt1) {return false}; 
	 }
	 if(DInt2>DInt1) {return false};
 }
 if(DInt2>DInt1) {return false};
} 		 
  
function SetCancelFlag () {
	var obj = document.forms[0];
	if(confirm("]]><XLAT.STREAM KEY="dvin/Common/CancelClicked" ESCAPE="true" ENCODE="false"/><![CDATA[")){
		obj.elements['upcommand'].value="cancel";
		obj.submit();
		return false;
	}
}
]]>
</SCRIPT>

</FTCS> 
