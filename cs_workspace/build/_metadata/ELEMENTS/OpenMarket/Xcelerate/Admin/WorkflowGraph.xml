<?xml version="1.0" ?>
<!DOCTYPE FTCS SYSTEM "futuretense_cs.dtd">
<FTCS Version="1.1">
<CALLELEMENT NAME="OpenMarket/Xcelerate/UIFramework/BasicEnvironment"/>
        <PROPERTY.GET PARAM="xcelerate.charset" INIFILE="futuretense_xcel.ini" VARNAME="charset"/>
            <SETVAR NAME="cs.contenttype" VALUE="text/html; charset=Variables.charset"/>
<!-- OpenMarket/Xcelerate/Admin/WorkflowGraph
-
- INPUT
     Required:
-      Variables.wfp:name - workflow process name
- OUTPUT
-
-->
<html> 
<!-- <html xmlns:v="urn:schemas-microsoft-com:vml"> -->

<head>
<!-- 
<style>
v\:* { behavior: url(#default#VML); }
</style>
-- -->
<title><XLAT.STREAM KEY="dvin/UI/Admin/WorkflowGraph"/></title>
<PROPERTY.GET PARAM="xcelerate.domain" INIFILE="futuretense_xcel.ini" VARNAME="docDomain"/>
<IF COND="IsVariable.docDomain=true">
<THEN>
	<IF COND="Variables.docDomain!=Variables.empty">
	<THEN>
	    <SCRIPT LANGUAGE="JavaScript">
		document.domain = "<CSVAR NAME="Variables.docDomain"/>";
	    </SCRIPT>
	</THEN>
	</IF>
</THEN>
</IF>
</head>

<body>
<WORKFLOWENGINE.GETPROCESSNAME NAME="Variables.wfp:name" OBJVARNAME="newprocess"/>
      <WORKFLOWPROCESS.SCATTER PREFIX="wfp:" NAME="newprocess"/>
			

<!-- return all hidden data back to process page via hidden variables -->
<!-- KK
<callelement NAME="OpenMarket/Xcelerate/Admin/WorkflowData">
	<argument NAME="DataAction" VALUE="datafromprocesspage"/>
</callelement> 
<callelement NAME="OpenMarket/Xcelerate/Admin/WorkflowData">
	<argument NAME="DataAction" VALUE="hiddenvariables"/>
</callelement>

<callelement NAME="OpenMarket/Xcelerate/Admin/WorkflowInspect">
      <argument NAME="inspectlevel" VALUE="short"/>
</callelement>

KK-->




<!-- Get Initial step and its states -->
<WORKFLOWPROCESS.GETINITIALSTEPID NAME="newprocess" VARNAME="startstp"/>
<WORKFLOWPROCESS.GETSTEP NAME="newprocess" VALUE="Variables.startstp" OBJVARNAME="strtstpobj"/>
<WORKFLOWSTEP.GETSTARTSTATE NAME="strtstpobj" VARNAME="insourcestate"/>
<WORKFLOWSTEP.GETENDSTATE NAME="strtstpobj" VARNAME="intargetstate"/>
<SETVAR NAME="StatesToVisit" VALUE="Variables.insourcestate"/>
<SETVAR NAME="StatesVisited" VALUE="Variables.insourcestate"/>

<!-- fetch initial step roles -->
<WORKFLOWSTEP.GETAUTHORIZATIONROLES NAME="strtstpobj" OBJVARNAME="inroles"/>
<ROLELIST.GETALL NAME="inroles" VARNAME="initiatorRolesComma"/>
<STRINGLIST NAME="inRoles" STR="Variables.initiatorRolesComma" DELIM=","/>
<setvar NAME="initiatorRoles" VALUE="inRoles.ITEM"/>
<IF COND="inRoles.#numRows!=1">
<THEN>
		<LOOP FROM="2" LIST="inRoles">
				<SETVAR NAME="initiatorRoles" VALUE="Variables.initiatorRoles inRoles.ITEM"/>
		</LOOP>
</THEN>
</IF>

<removevar NAME="tmp"/>
<setvar NAME="tmp" VALUE="Variables.StatesVisited"/>
<setvar NAME="errno" VALUE="0"/>
<begins STR="Variables.tmp" WHAT="Variables"/>
<if COND="Variables.errno=1">
<then>
		<setvar NAME="StatesToVisit" VALUE="000111"/>
		<setvar NAME="StatesVisited" VALUE="000111"/>
        <XLAT.LOOKUP KEY="dvin/Common/Start" VARNAME="inStateName"/>
</then>
</if>

<!--
- This loop works by building a list of states to visit, and for each one to establish links
- to adjacent states, and terminates when we have visited all the states of the workflow. Why
- are we doing this, since we have all the states in the WorkflowStates list? We are trying
- build a list (StatesVisited) as a heuristic to allow us to create a workflow diagram with an
- approximate left to right diagram, rather than states in random order, and links everywhere.
-->
<LOOP UNTIL="Variables.StatesToVisit=Variables.empty">

	<STRINGLIST NAME="State" STR="Variables.StatesToVisit" DELIM=","/>

	<!-- empty the set of states to visit after each iteration for target states -->
	<SETVAR NAME="StatesToVisit" VALUE="Variables.empty"/>
	
	<LOOP LIST="State">
		<!-- So, for each state that we have to visit... -->
		<setcounter NAME="STEP" VALUE="0"/>
		<setcounter NAME="nullEndStateSTEP" VALUE="0"/>
		<SETVAR NAME="nullEndStateIDPrefix" VALUE="001100"/>
        <XLAT.LOOKUP KEY="dvin/Common/End" VARNAME="nullEndStateName"/>

		<LOOP FROM="0" COUNT="Variables.wfp:stepsTotal">
			
			<!-- do some sneaky stuff to get hidden inputs to behave -->
			<removevar NAME="sourcestate"/>
			<setvar NAME="sourcestate" VALUE="Variables.wfp:stepsCounters.STEPstartstate"/>

			<removevar NAME="targetstate"/>
			<setvar NAME="targetstate" VALUE="Variables.wfp:stepsCounters.STEPendstate"/>

			<!-- <csvar NAME="original states for step is Variables.sourcestate, Variables.targetstate, State.ITEM"/><br/>	-->
			
			<!-- if initial source state is empty then set up our default  : this is only for graph -->
            <!-- the state could be either empty or starting with Variables -->
            <IF COND="IsVariable.sourcestate=true">
                <THEN>
                    <IF COND="Variables.sourcestate=Variables.empty">
                    <THEN>
                        <setvar NAME="sourcestate" VALUE="000111"/>
                    </THEN>
                    </IF>
                </THEN>
            </IF>
            <setvar NAME="errno" VALUE="0"/>
            <begins STR="Variables.sourcestate" WHAT="Variables"/>
            <if COND="Variables.errno=1">
                <then>
                        <setvar NAME="sourcestate" VALUE="000111"/>
                </then>
            </if>

			
			<!-- if target state is null then set up out default : this is also only for graph -->
            <!-- the state could be either empty or starting with Variables -->
			    <removevar NAME="tmp"/>
				<setvar NAME="tmp" VALUE="Variables.targetstate"/>
                <IF COND="IsVariable.tmp=true">
                    <THEN>
                        <IF COND="Variables.tmp=Variables.empty">
                        <THEN>
                            <setvar NAME="targetstate" VALUE="Variables.nullEndStateIDPrefixCounters.nullEndStateSTEP"/>
                            <inccounter NAME="nullEndStateSTEP" VALUE="1"/>
                        </THEN>
                        </IF>
                    </THEN>
                </IF>
                <setvar NAME="errno" VALUE="0"/>
				<begins STR="Variables.tmp" WHAT="Variables"/>
				<if COND="Variables.errno=1">
				<then>
						<setvar NAME="targetstate" VALUE="Variables.nullEndStateIDPrefixCounters.nullEndStateSTEP"/>
						<inccounter NAME="nullEndStateSTEP" VALUE="1"/>
				</then>
				</if>
			
			<!-- <csvar NAME="states for step is Variables.sourcestate, Variables.targetstate, State.ITEM"/><br/>	-->
			

			<!-- check if this route starts from the State in question-->
			<IF COND="Variables.sourcestate=State.ITEM">
			<THEN>
				<!-- <CSVAR NAME="this step starts from State.ITEM"/><br/>			-->
				<!-- check if we have already visited there and build target states -->
				<SETVAR NAME="errno" VALUE="0"/>
				<ISINLIST ITEM="Variables.targetstate" STR="Variables.StatesVisited"/>
				<IF COND="Variables.errno=0">
				<THEN>
				  <!-- <CSVAR NAME="didnt visit this steps target Variables.targetstate ... visiting it now"/><br/> -->
					<!-- not in list, so add it -->
					<SETVAR NAME="StatesVisited" VALUE="Variables.StatesVisited,Variables.targetstate"/>
					<IF COND="Variables.StatesToVisit=Variables.empty">
					<THEN>
						<!-- <CSVAR NAME="no visited states yet adding Variables.targetstate"/><br/> -->
						<SETVAR NAME="StatesToVisit" VALUE="Variables.targetstate"/>
					</THEN>
					<ELSE>
						<!-- <CSVAR NAME="adding Variables.targetstate"/><br/>	 -->
						<SETVAR NAME="StatesToVisit" VALUE="Variables.StatesToVisit,Variables.targetstate"/>
					</ELSE>
					</IF>
				</THEN>
				</IF>
			</THEN>
			</IF>
			<inccounter NAME="STEP" VALUE="1"/>
		</LOOP>
	</LOOP>
</LOOP>
<!-- So, we now have the list of states	 
<CSVAR NAME="Variables.StatesVisited"/>  <br/>	--> 
<STRINGLIST NAME="State" STR="Variables.StatesVisited" DELIM=","/>
<!-- calculate some outer bound sizes -->
<!-- maximum size for State name -->
<setvar NAME="stateFullName" VALUE="Variables.inStateName:Variables.inStateDescription"/>
<STRING.LENGTH VALUE="Variables.stateFullName" VARNAME="MaxNameLength"/>
<STRING.LENGTH VALUE="Variables.initiatorRoles" VARNAME="MaxRoleLength"/>
<LOOP LIST="State">
	<IF COND="State.ITEM!=000111">
	<THEN>
		  <setvar NAME="errno" VALUE="0"/>
		  <begins STR="State.ITEM" WHAT="001100"/> <!--Exclude the null end state -->
		  <if COND="Variables.errno=0">
		  <then>
				<WORKFLOWENGINE.GETSTATEID ID="State.ITEM" OBJVARNAME="stateobj"/>
				<WORKFLOWSTATE.GETSTATENAME NAME="stateobj" VARNAME="state"/>
				<WORKFLOWSTATE.GETSTATEDESCRIPTION NAME="stateobj" VARNAME="description"/>
				<setvar NAME="stateFullName" VALUE="Variables.state:Variables.description"/>
				<STRING.LENGTH VALUE="Variables.stateFullName" VARNAME="nameLength"/>
				<CALCULATOR.GO VALUE="Variables.nameLength Variables.MaxNameLength GT" VARNAME="answer"/>
				
			
				<IF COND="Variables.answer=1">
				<THEN>
					<SETVAR NAME="MaxNameLength" VALUE="Variables.nameLength"/>
				</THEN>
				</IF>
				
				<!--<WORKFLOWPROCESS.GETSOURCEROLES NAME="newprocess" SOURCESTATE="State.ITEM" VARNAME="stateRoles"/>
				<csvar NAME="Variables.stateRoles"/>	-->
				<SETVAR NAME="tablename" VALUE="WorkflowRoutes"/>
				<CALLELEMENT NAME="OpenMarket/Xcelerate/Util/validateFields">
					<ARGUMENT NAME="columnvalue" VALUE="Variables.graphWorkflowid"/>
					<ARGUMENT NAME="type" VALUE="Long"/>
				</CALLELEMENT>
				<IF COND="Variables.validatedstatus=true">
				<THEN>
					<CALLELEMENT NAME="OpenMarket/Xcelerate/Util/validateFields">
						<ARGUMENT NAME="columnvalue" VALUE="State.ITEM"/>
						<ARGUMENT NAME="type" VALUE="Long"/>
					</CALLELEMENT>
					<IF COND="Variables.validatedstatus=true">
					<THEN>
						<EXECSQL SQL="SELECT DISTINCT acl,id FROM WorkflowRoutes WHERE workflowid=Variables.graphWorkflowid AND sourcestate=State.ITEM ORDER BY acl ASC" LIST="SQLResult"/>
					</THEN>
					</IF>
				</THEN>
				</IF>
				<LOOP LIST="SQLResult">
					<setvar NAME="stateRoles" VALUE="SQLResult.acl"/>
					<STRING.LENGTH VALUE="Variables.stateRoles" VARNAME="roleLength"/>
					<CALCULATOR.GO VALUE="Variables.roleLength Variables.MaxRoleLength GT" VARNAME="answer"/>
					
				
					<IF COND="Variables.answer=1">
					<THEN>
						<SETVAR NAME="MaxRoleLength" VALUE="Variables.roleLength"/>
					</THEN>
					</IF>
				</LOOP>
          </then>
          </if>
	</THEN>
	</IF>
</LOOP>
<CALCULATOR.GO VALUE="Variables.MaxRoleLength 20 GT" VARNAME="rolelengthbound"/>
<IF COND="Variables.rolelengthbound=1">
<THEN>
	<SETVAR NAME="MaxRoleLength" VALUE="20"/>
</THEN>
</IF>

<CALCULATOR.GO VALUE="Variables.MaxNameLength 3.5 *" VARNAME="StateNameHeight"/>
<CALCULATOR.GO VALUE="Variables.MaxRoleLength 6 *" VARNAME="RoleHeight"/>
<CALCULATOR.GO VALUE="Variables.RoleHeight 10 -" VARNAME="RoleBoxHeight"/>
<CALCULATOR.GO VALUE="Variables.StateNameHeight 5 +" VARNAME="StartLinkHeight"/>

<!-- max size for roles -->


<![CDATA[
	<script type="text/javascript" src="js/dojo/dojo.js">
	</script>
	<script type="text/javascript">
		var node, //to which node the graph will be attached
		surface, //main surface on which the graph will be drawn
		zIndexCounter=1,
		group, //main plain contains a group, the entire graph is drawn inside this group
		stepBoxHashTable = new Array();
		
		dojo.require("dojox.gfx");
		
		//class Arrow to draw Arrow connector, and to handle arrow onclick events
		function Arrow(p){
			if(typeof(p)=='undefined'){
				throw "Arrow can't be created without path description";
			}
			this.pathData=p;
			this.grp = group.createGroup();
			this.stepDetailBox=null;
			this.rawNode=this.grp.rawNode;
		}
		Arrow.prototype={

		/* This function draws the arrow defined by the parameter set given by this.pathData
		   parameter: p="Variables.StartX,Variables.StartY,Variables.NodeDisp,Variables.Delta,Variables.Y2,Variables.X3,20,Variables.X4" 
		   start from var0var1, move horizontally to var2var1, draw a diamond var3var5 var4var1 var3var6 var2var1,
		   draw lines var2var7 var8var7 var8var9 var10var9, finally a triangle var13var11 var13var12 var10var9 */
			draw: function(){
				var	startx = this.pathData.StartX,
					starty = this.pathData.StartY,
					nodedisp = this.pathData.NodeDisp,
					delta = this.pathData.Delta,
					y2 = this.pathData.Y2,
					x3 = this.pathData.X3,
					twenty = this.pathData.twenty,
					x4 = this.pathData.X4,
			
			//formulae, generated from existing vml code
				var0 = startx,
				var1 = starty,
				var2 = startx + nodedisp + 0,
				var3 = var2 - delta,
				var4 = var3 - delta,
				var5 = var1 - delta,
				var6 = var1 + delta + 0,
				var7 = y2,
				var8 = x3,
				var9 = twenty,
				var10 = x4,
				var11 = var9 - 5,
				var12 = var9 + 5 + 0,
				var13 = var10 - 10,
				c=dojo.colorFromArray([255, 255, 255, .1]),//creating a hidden color, opacity: 10%
				_hiddenStroke = {
					color: c,
					style: "solid",
					width: 10
				},
				_defaultStroke = {
					color: "black",
					style: "solid",
					width: 1
				};
			
			//(end of var declarations)
			
			//adding a almost zero opacity thick path behind the original one to increase clickability
				this.grp.createPath().moveTo(var0, var1).lineTo(var2, var1).lineTo(var3, var5).lineTo(var4, var1).lineTo(var3, var6).lineTo(var2, var1).lineTo(var2, var7).lineTo(var8, var7).lineTo(var8, var9).lineTo(var10, var9).lineTo(var13, var11).lineTo(var13, var12).lineTo(var10, var9).setStroke(_hiddenStroke);

			//creating a solid triangle
				this.grp.createPath().moveTo(var13, var11).lineTo(var13, var12).lineTo(var10, var9).setFill("gray");
			
			//creating the path
				this.grp.createPath().moveTo(var0, var1).lineTo(var2, var1).lineTo(var3, var5).lineTo(var4, var1).lineTo(var3, var6).lineTo(var2, var1).lineTo(var2, var7).lineTo(var8, var7).lineTo(var8, var9).lineTo(var10, var9).lineTo(var13, var11).lineTo(var13, var12).lineTo(var10, var9).setStroke(this.pathData.stroke || _defaultStroke);

			//setting cursor style hand so that identifying line click becomes easier
				this.grp.rawNode.style.cursor = "pointer";
				return this.grp.rawNode;
			},
			
			//stepbox setter method
			setStepBox:function(textBox){
				this.stepDetailBox=textBox;
				if(typeof(stepBoxHashTable[this.stepDetailBox.left])=='undefined'){
					stepBoxHashTable[this.stepDetailBox.left] = new Array();
				}	
				stepBoxHashTable[this.stepDetailBox.left].push(this.stepDetailBox);

				var thisObject=this;
				//registering onclick handler on linking path
				this.rawNode.onclick=function(){
					if (thisObject.stepDetailBox.getVisibility() == false) {
						thisObject.stepDetailBox.setVisibility(true);
						var overlappedBoxes=stepBoxHashTable[thisObject.stepDetailBox.left];
						for(overlappedBox in overlappedBoxes){
							if(overlappedBoxes[overlappedBox]!=thisObject.stepDetailBox){
								overlappedBoxes[overlappedBox].setVisibility(false);
		}
						}
					} else {
						thisObject.stepDetailBox.setVisibility(false);
					}
				}
			},
			
			//setter for id
			setId:function(id){
				if(typeof(id)!='undefined'){
					this.rawNode.setAttribute("id", id);
				}
			},
			
			//getter
			getId:function(){
				return this.rawNode.id;
			}
			
		};
		
		//TextFont: class used to set text styling to Text object
		
		function TextFont(cssFontObj) {
			var cfo; //iterator
			
			this.style = "normal";
			this.variant = "normal";
			this.weight = "normal";
			this.size = "15pt";
			this.family = "arial";
			for (cfo in cssFontObj) {
				if (this[cfo]) {
					this[cfo] = cssFontObj[cfo];
				}
			}
		}
		
		//JSTextFont: class used to set javascript style properties to Text
		
		function JSTextFont(cssFontObj) {
			var cfo, ccfo, st; //used in iteration
			
			this.fontStyle = "normal";
			this.fontVariant = "normal";
			this.fontWeight = "normal";
			this.fontSize = "15pt";
			this.fontFamily = "arial";
			for (cfo in cssFontObj) {
				st = cfo.replace(cfo.substring(0, 1), cfo.substring(0, 1).toUpperCase());
				ccfo = 'font' + st;
				if (this[ccfo]) {
					this[ccfo] = cssFontObj[cfo];
				}
			}
		}
		
		//Text: class representing a Text object (used by TextBox)
		
		function Text(text, style, tgroup) {
			this.text = text;
			this.style = style;
			this.style.color = style.color || "black";
			this.height = 0;
			this.tgroup = tgroup;
			this.textSegArr = [];
			this.parent=null;//parent textbox object
			
		}
		
		//members of Text prototype
		
		Text.prototype = {
			
			//draw function of the text object
			//returns height offset of this text component, so that next text object
			//can be drawn below this text based on height adjustment
			draw: function(top, left, width) {
				
				var textOffset = 10,
					tf = new JSTextFont(this.style),
					tb = dojox.gfx._base._getTextBox(this.text, tf), //returns width/height of the styled text
					arr = this.breakLine(this.text, tf, width - (2 * textOffset * 1.5)), //wrapping the text; JSTextFont object is required
					i, txt; //used in iteration
				
				//drawing each wrapped line one by one
				for (i = 0; i < arr.length; i++) {
					//if trimming required we add "more..." at the end of the box
					if((this.parent.trimmed==true)&&(this.parent.top+this.parent.height<(top + tb.h + ((i+1) * tb.h * 0.9)))){

						txt = this.tgroup.createText({
							x: left + textOffset,
							y: top + tb.h + (i * tb.h * 0.9),
							text: ]]>'<XLAT.STREAM KEY="dvin/UI/Admin/moredotdotdot"/>'<![CDATA[
						}).setFill('black').setFont(new TextFont({weight:"bold"}));

						this.parent.showToolTip=true;
						break;
					}
					txt = this.tgroup.createText({
						x: left + textOffset,
						y: top + tb.h + (i * tb.h * 0.9),
						text: arr[i]
					}).setFill(this.style.color).setFont(new TextFont(this.style));
					this.textSegArr.push(txt);
				}
				this.height = i * tb.h;
				return this.height;
			},
			
			//breakline to break string as per width
			breakLine: function(str, styleObj, maxWidth) {
				var retArr = [],
					tb = dojox.gfx._base._getTextBox(str, styleObj),
					charsPerRow = Math.round(str.length * maxWidth * 1.0 / tb.w),
					ptr = 0,
					strLen = str.length,
					s = "",
					lastIdx;
				while (ptr < strLen) {
					while (str.charAt(ptr) === ' ') {
						ptr++; //advance to first non-space
					}
					if ((ptr + charsPerRow) < strLen) {
						s = str.substr(ptr, charsPerRow);
						
						//trying to find the last index of blank, but this location may be
						//outside of the enclosing rectangle's bounding box,
						//so we need to search beackward from this point.
						//that's why we again computed last index of blank
						lastIdx = s.lastIndexOf(" ");
						if (lastIdx >= 0) {
							s = s.substring(0, lastIdx);
							tb = dojox.gfx._base._getTextBox(s, styleObj);
							while (tb.w > maxWidth) {
								//backtracking from the last index of blank
								//and trying to find previous suitable location
								lastIdx = s.lastIndexOf(" ");
								if (lastIdx >= 0) {
									//split at whitespace
									s = s.substring(0, lastIdx);
									tb = dojox.gfx._base._getTextBox(s, styleObj);
								} else {
									//couldn't find a space to wrap at - wrap where necessary
									tb = dojox.gfx._base._getTextBox(s, styleObj);
									while (tb.w > maxWidth) {
										s = s.substring(0, s.length - 1);
										tb = dojox.gfx._base._getTextBox(s, styleObj);
									}
								}
							}
						} else {
							//couldn't find a space to wrap at - wrap where necessary
							tb = dojox.gfx._base._getTextBox(s, styleObj);
							while (tb.w > maxWidth) {
								s = s.substring(0, s.length - 1);
								tb = dojox.gfx._base._getTextBox(s, styleObj);
							}
						}
						retArr.push(s);
						ptr += s.length;
					} else {
						s = str.substr(ptr);
						ptr = strLen;
						retArr.push(s);
					}
				}
				return retArr;
			},
			
			//method to set its parent textbox
			setParent:function(parent){
				this.parent=parent;
			}
		};
		//end of Text prototype
		
		//drawing textbox
		/**
		 * Class TextBox: can contain several text segments that will be
		 * automatically wrapped around the width of the textbox.
		 * TextBox can be clickable if configured accordingly.
		 * Constructor parameters: params array
		 */
		
		function TextBox(params) {
			var tp; //used in mixin iteration
			
			//setting default values to fields
			this.width = 100;
			this.height = 100;
			this.top = 10;
			this.left = 10;
			this.color = 'white';
			this.borderColor = 'black';
			this.group = group.createGroup();//group of the textbox object
			this.textGroup = this.group.createGroup();//inner subgroup for the text components
			this.textArr = [];//array to store Text child-objects

			this.visible = true;//visibility parameter
			this.trimmed = true;//true: text will be trimmed to be fit within the textbox; false:textbox height will be increased to fit entire text
			this.params = params;//copy of params
			this.tooltip = null;//variable to store tooltip object
			this.type = "textbox";//type of textbox currently available types are : textbox, tooltip
			this.showToolTip = false;//variable to determine whether to show tooltip or not

			//setting constructor arguments to fields
			for (tp in params) {
				if (this[tp]) {
					this[tp] = params[tp];
				}
			}
			
		}
		
		// members of TextBox prototype
		
		TextBox.prototype = {
			//method to send a textbox back to 1 layer
			moveToBack: function() {
				this.group.moveToBack();
			},
			
			//method to bring a textbox front to 1 layer
			moveToFront: function() {
				this.group.moveToFront();
			},

			//method to bring a textbox front to the top-most layer
			moveToTop: function() {
				if(!dojo.isIE){
					var par=this.group.rawNode.parentNode;
					par.removeChild(this.group.rawNode);
					par.appendChild(this.group.rawNode);
				}else{
					//zindex property is working for ie
					this.group.rawNode.style.zIndex=zIndexCounter++;										
				}
			},
			
			//drawing the entire textbox
			draw: function() {
				var anchor, rect, height = 0,
					j, jj; //iterators
				
				
				//drawing the text components on the rectangle first
				//with automatic wrapping of text around the box
				for (j = 0; j < this.textArr.length; j++) {
					//calling draw method of the text components 
					height += this.textArr[j].draw(this.top + height, this.left, this.width);
				}
				
				//adjusting trimmed height of text boxes
				if(!this.trimmed){
					if(this.type=='textbox')
						this.height=(height>this.height?height:this.height);
					else if(this.type=='tooltip')
						this.height=height;
				}
				
				this.height+=5;//adding 5px offset by default

				//drawing rectangle of the textbox
				if(this.type=='textbox'){
					
					//displaying textbox
					rect = this.group.createRect({
						x: this.left,
						y: this.top,
						width: this.width,
						height: this.height
					}).setFill(this.color).setStroke({
						color: this.borderColor,
						width: "1"
					}).moveToBack();
				}else if(this.type=='tooltip'){
					
					//displaying rounded corner tooltip rectangle
					rect = this.group.createRect({
						x: this.left,
						y: this.top,
						width: this.width,
						height: this.height,
						r:10
					}).setFill(dojo.colorFromArray([255, 255, 225, 1])).setStroke({
						color: this.borderColor,
						width: "1"
					}).moveToBack();
					//displaying shadow of tooltip shifting 8px right-bottom
					rect1 = this.group.createRect({
						x: this.left+8,
						y: this.top+8,
						width: this.width,
						height: this.height,
						r:10
					}).setFill(dojo.colorFromArray([0, 0, 0, .3]))//setting lighter opacity shadow
					  .setStroke({
						color: dojo.colorFromArray([0, 0, 0, .3]),//setting lighter opacity border
						width: "1"
					}).moveToBack();
					
				}
				
				//creating reference of 'this' object to be used within event handler methods
				var thisObject=this;

				//for textbox we register tooltip display handlers
				//for tooltip no specific handler is required for now
				if(this.type=='textbox'){	

					//registering onmouseover
					this.group.rawNode.onmouseover=function(e){
						if(thisObject.tooltip == null && thisObject.showToolTip==true){
							//creating the tooltip textbox only once
							thisObject.tooltip = new TextBox({
								top:thisObject.params.top+30, 
								left:thisObject.params.left+thisObject.params.width+5,
								width:thisObject.params.width+100, 
								height:thisObject.params.height,type:'tooltip'});
								
							for(t in thisObject.textArr){
								thisObject.tooltip.setText(thisObject.textArr[t].text.replace(/\ /g,", "),thisObject.textArr[t].style);
							}
							thisObject.tooltip.fitText(false);
							thisObject.tooltip.draw();
							thisObject.tooltip.moveToFront();
						}
						
						//setting tooltip visibility
						if(thisObject.tooltip != null){
							thisObject.tooltip.setVisibility(true);
							thisObject.tooltip.moveToTop();
						}
					};

					//registering onmouseout
					thisObject.group.rawNode.onmouseout=function(){
						//setting tooltip visibility
						if(thisObject.tooltip != null){
							thisObject.tooltip.setVisibility(false);
						}
					};
				}
				
				//if link is applied to the textbox then setting link
				if (this.link && this.link.link) {
					//the link attribute of the this.link must be set to a url
					if (typeof(dojox.gfx.svg) != 'undefined') {
						anchor = document.createElementNS(dojox.gfx.svg.xmlns.svg, "a");
						anchor.setAttributeNS(dojox.gfx.svg.xmlns.xlink, "href", this.link.link);
					} else {
						anchor = document.createElement("a");
						anchor.setAttribute("href", this.link.link);
					}
					
					//checking if the target should be a new window
					if (this.link.target) {
						anchor.setAttribute("target", this.link.target);
					}
					
					//adjusting anchor insertion
					this.group.rawNode.appendChild(anchor);
					anchor.appendChild(rect.rawNode);
					
					for (jj = 0; jj < this.textArr.length; jj++) {
						var txtSegArr = this.textArr[jj].textSegArr;
						for (cnt = 0; cnt < txtSegArr.length; cnt++) {
							anchor.appendChild(txtSegArr[cnt].rawNode);
						}
					}
					
					//setting pointer/hand cursor style on rectangle
					rect.rawNode.style.cursor = "pointer";
				}
			},
			
			//method to set link on a textbox
			//link has two properties: link and target, link is the mandatory property,
			//if target is not set linked page will be opened on same browser window
			setLink: function(link) {
				this.link = link;
			},
			
			//method to set text component on the box, each call to this method will
			//add a new text component to the textbox
			setText: function(text, style, tgroup) {
				var t;
				if (text) {
					text = dojo.trim(text);
					t = new Text(text, style || {}, tgroup || this.textGroup);
					t.setParent(this);
					this.textArr.push(t);
				}
			},
			
			//method to control visibility of the textbox
			setVisibility: function(vis) {
				this.visible = vis;
				if (this.visible) {
					this.group.rawNode.style.visibility = "";
				} else {
					this.group.rawNode.style.visibility = "hidden";
				}
			},
			
			//getter method
			getVisibility: function() {
				if(	this.group.rawNode.style.visibility == '' || 
					this.group.rawNode.style.visibility == 'visible' ||
					this.group.rawNode.style.visibility == 'block')
					this.visible=true;
				else
					this.visible=false;
				return this.visible;
			},
			//method to set id to the textbox,
			//so that it can be accessible through document.getElementById method
			setId: function(id) {
				if (id) {
					this.group.rawNode.setAttribute("id", id);
				}
			},
			
			//getter method
			getId: function() {
				return this.group.rawNode.id;
			},
			//method to set fit-text flag
			fitText:function(fit){
				if(fit==true){
					this.trimmed=true;
				}else{
					this.trimmed=false;
				}
			}
		};
		//end of TextBox prototype members
		
		//add on load
		dojo.addOnLoad(function() {
			init();
			drawGraph(); //defined in the body
		});
	</script>
]]>

<!-- start the picture -->
<br/><br/>
<div id="surface" />     
<![CDATA[
<script type="text/javascript">
	function drawGraph(){
		var tb1, tb2, tb3, tb4, tb5; //used for instantiating TexBoxes
]]>


<SETVAR NAME="StatePositions" VALUE="Variables.empty"/>
<SETVAR NAME="StateSteps" VALUE="Variables.empty"/>
<SETVAR NAME="CurrentStatePos" VALUE="0"/>
<SETVAR NAME="MaxHeight" VALUE="0"/>
<!-- variable to store max width of the graph -->
<SETVAR NAME="MaxWidth" VALUE="0"/>

<LOOP LIST="State">
	<!-- draw each state 	 -->
	<!-- calculate the height 	-->
	<IF COND="State.ITEM=000111">
	<THEN>
				<!-- for initial source state  -->
				<CALCULATOR.GO VALUE="Variables.StateNameHeight Variables.RoleHeight +" VARNAME="height"/>
	</THEN>
	<ELSE>
			<SETVAR NAME="tablename" VALUE="WorkflowRoutes"/>
			<CALLELEMENT NAME="OpenMarket/Xcelerate/Util/validateFields">
				<ARGUMENT NAME="columnvalue" VALUE="Variables.graphWorkflowid"/>
				<ARGUMENT NAME="type" VALUE="Long"/>
			</CALLELEMENT>
			<IF COND="Variables.validatedstatus=true">
			<THEN>
				<CALLELEMENT NAME="OpenMarket/Xcelerate/Util/validateFields">
					<ARGUMENT NAME="columnvalue" VALUE="State.ITEM"/>
					<ARGUMENT NAME="type" VALUE="Long"/>
				</CALLELEMENT>
				<IF COND="Variables.validatedstatus=true">
				<THEN>
					<EXECSQL SQL="SELECT Variables.StateNameHeight+Variables.RoleHeight*count(acl) as height FROM WorkflowRoutes WHERE 	workflowid=Variables.graphWorkflowid AND sourcestate=State.ITEM"
					LIST="SQLResult"/>
				</THEN>
				</IF>
			</THEN>
			</IF>
			<SETVAR NAME="height" VALUE="SQLResult.height"/>
	</ELSE>
	</IF>
	<CALCULATOR.GO VALUE="Variables.height Variables.MaxHeight GT" VARNAME="answer"/>
		
	
	<IF COND="Variables.answer=1">
	<THEN>
		<SETVAR NAME="MaxHeight" VALUE="Variables.height"/>
	</THEN>
	</IF>	
	<!-- Get workflow states list 	-->
	<IF COND="State.ITEM!=000111">
	<THEN>
			<setvar NAME="errno" VALUE="0"/>
				<begins STR="State.ITEM" WHAT="001100"/>
				<if COND="Variables.errno=1">
				<then>
						<setvar NAME="state" VALUE="Variables.nullEndStateName"/>
                        <REPLACEALL LIST="Variables.CurrentStatePos,Variables.height,State.ITEM,Variables.state,Variables.description">
            			<![CDATA[
	            			tb1=new TextBox({left:Variables.CurrentStatePos,top:0,width:150,height:Variables.height});
	            			tb1.setText("Variables.state",{weight:"bold"});
							tb1.draw();            			
							tb1.moveToBack();
            			]]>
            			</REPLACEALL>
				</then>
				<else>	
						<WORKFLOWENGINE.GETSTATEID ID="State.ITEM" OBJVARNAME="aprvobj"/>
						<WORKFLOWSTATE.GETSTATENAME NAME="aprvobj" VARNAME="state"/>
						<WORKFLOWSTATE.GETSTATEDESCRIPTION NAME="aprvobj" VARNAME="description"/>
                        <REPLACEALL LIST="Variables.CurrentStatePos,Variables.height,State.ITEM,Variables.state,Variables.description">
            			<![CDATA[
	            			tb2=new TextBox({left:Variables.CurrentStatePos,top:0,width:150,height:Variables.height,color:"#56CBF1",borderColor:"white"});
	            			tb2.setText("Variables.state:",{weight:"bold"});
	            			tb2.setText("Variables.description");
	            			tb2.setLink({link:"ContentServer?pagename=OpenMarket/Xcelerate/Admin/WorkflowStatusCodeFront&action=details&id=State.ITEM"});
	            			tb2.draw();
	            			tb2.moveToBack();
            			]]>
            			</REPLACEALL>
				</else>		
			  </if>	
			
	</THEN>
	<ELSE>
			<SETVAR NAME="state" VALUE="Variables.inStateName"/>
			<REPLACEALL LIST="Variables.CurrentStatePos,Variables.height,Variables.state">
			<![CDATA[
       			tb3=new TextBox({left:Variables.CurrentStatePos,top:0,width:150,height:Variables.height});
       			tb3.setText("Variables.state",{weight:"bold"});
				tb3.draw();			
				tb3.moveToBack();
			]]>
			</REPLACEALL>
	</ELSE>
	</IF>
	
	<!-- Now draw the roles -->
	<CALCULATOR.GO VALUE="20 Variables.CurrentStatePos +" VARNAME="CalcAnswer"/>	
	
	<SETVAR NAME="RoleX" VALUE="Variables.CalcAnswer"/>
	<SETVAR NAME="RoleY" VALUE="Variables.StateNameHeight"/>
	
	<!-- <csvar NAME="sourcestate is State.ITEM "/>	 -->
	<IF COND="State.ITEM=000111">
	<THEN>
				<!-- if no initial source state then set just one acl height -->
				<REPLACEALL LIST="Variables.RoleX,Variables.RoleY,Variables.initiatorRoles,Variables.RoleBoxHeight">
					<![CDATA[
		       			tb4=new TextBox({left:Variables.RoleX,top:Variables.RoleY,width:110,height:Variables.RoleBoxHeight});
		       			tb4.setText("Variables.initiatorRoles");
						tb4.draw();					
					]]>
					
				</REPLACEALL>	
				<SETVAR NAME="StateSteps" VALUE="Variables.startstp;;;"/>
	</THEN>			
	<ELSE>
	
			<SETVAR NAME="tablename" VALUE="WorkflowRoutes"/>
			<CALLELEMENT NAME="OpenMarket/Xcelerate/Util/validateFields">
				<ARGUMENT NAME="columnvalue" VALUE="Variables.graphWorkflowid"/>
				<ARGUMENT NAME="type" VALUE="Long"/>
			</CALLELEMENT>
			<IF COND="Variables.validatedstatus=true">
			<THEN>
				<CALLELEMENT NAME="OpenMarket/Xcelerate/Util/validateFields">
					<ARGUMENT NAME="columnvalue" VALUE="State.ITEM"/>
					<ARGUMENT NAME="type" VALUE="Long"/>
				</CALLELEMENT>
				<IF COND="Variables.validatedstatus=true">
				<THEN>
					<EXECSQL SQL="SELECT DISTINCT acl,id FROM WorkflowRoutes WHERE workflowid=Variables.graphWorkflowid AND sourcestate=State.ITEM ORDER BY acl ASC"
						LIST="SQLResult"/>
				</THEN>
				</IF>
			</THEN>
			</IF>
			<!-- <csvar NAME="role is Variables.acls "/>	 -->
			<LOOP LIST="SQLResult">
					<STRINGLIST NAME="aclList" STR="SQLResult.acl" DELIM=","/>
					<SETVAR NAME="acls" VALUE="Variables.empty"/>
					<LOOP LIST="aclList">
								<SETVAR NAME="acls" VALUE="Variables.acls aclList.ITEM"/>
					</LOOP>

				<REPLACEALL LIST="Variables.RoleX,Variables.RoleY,Variables.acls,Variables.RoleBoxHeight">
					<![CDATA[
		       			tb5=new TextBox({left:Variables.RoleX,top:Variables.RoleY,width:110,height:Variables.RoleBoxHeight});
		       			tb5.setText("Variables.acls");
						tb5.draw();
					]]>
				</REPLACEALL>
						
				<CALCULATOR.GO VALUE="Variables.RoleHeight Variables.RoleY +" VARNAME="CalcAnswer"/>	
				<SETVAR NAME="RoleY" VALUE="Variables.CalcAnswer"/>
				
				<SETVAR NAME="StateSteps" VALUE="Variables.StateSteps SQLResult.id"/>
			</LOOP>
			<SETVAR NAME="StateSteps" VALUE="Variables.StateSteps;;;"/>
	</ELSE>
	</IF>
	
	<IF COND="Variables.StatePositions=Variables.empty">
	<THEN>
		<SETVAR NAME="StatePositions" VALUE="Variables.CurrentStatePos"/>
	</THEN>
	<ELSE>
		<SETVAR NAME="StatePositions" VALUE="Variables.StatePositions,Variables.CurrentStatePos"/>
	</ELSE>
	</IF>
	<!-- calcutating max width -->
	<CALCULATOR.GO VALUE="Variables.CurrentStatePos Variables.MaxWidth GT" VARNAME="condAns"/> 
	<IF COND="Variables.condAns=1">
	<THEN>
		<SETVAR NAME="MaxWidth" VALUE="Variables.CurrentStatePos"/>
	</THEN>
	</IF>
		
	<CALCULATOR.GO VALUE="300 Variables.CurrentStatePos +" VARNAME="CalcAnswer"/>	
	<SETVAR NAME="CurrentStatePos" VALUE="Variables.CalcAnswer"/>
</LOOP>


<!-- OK, build a list from the state positions 	-->
<STRINGLIST NAME="StatePos" STR="Variables.StatePositions" DELIM=","/>
<SETVAR NAME="CurrentState" VALUE="none"/>

<!-- build a list with acls in the order they are displayed -->
<STRINGLIST NAME="StateStp" STR="Variables.StateSteps" DELIM=";;;"/>
<!-- <csvar NAME="StateSteps are Variables.StateSteps"/>	-->

<CALCULATOR.GO VALUE="20 Variables.MaxHeight +" VARNAME="CalcAnswer"/>	
<SETVAR NAME="MaxHeight" VALUE="Variables.CalcAnswer"/>

<!-- variable to store max height of the hidden path-description text box -->
<SETVAR NAME="MaxHiddenBoxHeight" VALUE="0" />

<CALCULATOR.GO VALUE="Variables.wfp:stepsTotal 30 *" VARNAME="MaxStepIncrements"/>
<CALCULATOR.GO VALUE="Variables.MaxHeight Variables.MaxStepIncrements +" VARNAME="StepBoxTop"/>
<setcounter NAME="STEP" VALUE="0"/>
<LOOP FROM="0" COUNT="Variables.wfp:stepsTotal">


 		<!-- do some sneaky stuff to get hidden inputs to behave -->
			<removevar NAME="sourcestate"/>
			<setvar NAME="sourcestate" VALUE="Variables.wfp:stepsCounters.STEPstartstate"/>
			<removevar NAME="targetstate"/>
			<setvar NAME="targetstate" VALUE="Variables.wfp:stepsCounters.STEPendstate"/>
			<removevar NAME="acl"/>
			<setvar NAME="acl" VALUE="Variables.wfp:stepsCounters.STEPauthrolesroles"/>
			<removevar NAME="override"/>
			<setvar NAME="override" VALUE="Variables.wfp:stepsCounters.STEPoverride"/>
			<removevar NAME="stepname"/>
			<setvar NAME="stepname" VALUE="Variables.wfp:stepsCounters.STEPname"/>
			<removevar NAME="steptype"/>
			<setvar NAME="steptype" VALUE="Variables.wfp:stepsCounters.STEPtype"/>
			<removevar NAME="stepid"/>
			<setvar NAME="stepid" VALUE="Variables.wfp:stepsCounters.STEPid"/>
			<removevar NAME="stepActTot"/>
			<setvar NAME="stepActTot" VALUE="Variables.wfp:stepsCounters.STEPactionsactionTotal"/>
			<removevar NAME="stepCondTot"/>			
			<setvar NAME="stepCondTot" VALUE="Variables.wfp:stepsCounters.STEPconditionsactionTotal"/>
			
			<!-- <csvar NAME="original states for step is Variables.sourcestate, Variables.targetstate, State.ITEM"/><br/>	-->
			
			<!-- if initial source state is empty then set up our default  : this is only for graph -->
            <!-- the state could be either empty or starting with Variables -->
            <IF COND="IsVariable.sourcestate=true">
                <THEN>
                    <IF COND="Variables.sourcestate=Variables.empty">
                    <THEN>
                        <setvar NAME="sourcestate" VALUE="000111"/>
                    </THEN>
                    </IF>
                </THEN>
            </IF>
            <setvar NAME="errno" VALUE="0"/>
			<begins STR="Variables.sourcestate" WHAT="Variables"/>
			<if COND="Variables.errno=1">
				<then>
						<setvar NAME="sourcestate" VALUE="000111"/>
				</then>
			</if>



<!-- <LOOP LIST="WorkflowRoutes">	-->
	<IF COND="Variables.sourcestate!=Variables.CurrentState">
	<THEN>
		<!-- set up for new source state 	-->
		<SETVAR NAME="CurrentState" VALUE="Variables.sourcestate"/>
		<LOOP LIST="State" UNTIL="State.ITEM=Variables.CurrentState"/>
		<SETVAR NAME="StateIndex" VALUE="State.#curRow"/>
		<GOTOROW LIST="StatePos" ROWNUM="State.#curRow"/>
		<GOTOROW LIST="StateStp" ROWNUM="State.#curRow"/>
		<STRINGLIST NAME="CurStateSteps" STR="StateStp.ITEM" DELIM="%20"/>
		<IF COND="CurStateSteps.ITEM!=Variables.stepid">
		<THEN>
				<LOOP LIST="CurStateSteps" UNTIL="CurStateSteps.ITEM=Variables.stepid"/>		
				<CALCULATOR.GO VALUE="CurStateSteps.#curRow 1 -" VARNAME="roleIncr"/>			
				<CALCULATOR.GO VALUE="Variables.RoleHeight Variables.roleIncr *" VARNAME="RoleHeightIncr"/>	
				<CALCULATOR.GO VALUE="Variables.StartLinkHeight Variables.RoleHeightIncr +" VARNAME="ACLY"/>
				<SETVAR NAME="StartY" VALUE="Variables.ACLY"/> 
		</THEN>
		<ELSE>
				<SETVAR NAME="ACLY" VALUE="Variables.StartLinkHeight"/>
				<SETVAR NAME="StartY" VALUE="Variables.StartLinkHeight"/>	
		</ELSE>
		</IF>	
		
		<CALCULATOR.GO VALUE="130 StatePos.ITEM +" VARNAME="CalcAnswer"/>	
		<SETVAR NAME="StartX" VALUE="Variables.CalcAnswer"/>  
		<SETVAR NAME="CurrentACL" VALUE="Variables.acl"/>
		<SETVAR NAME="NodeDisp" VALUE="30"/>	
	</THEN>
	<ELSE>
				
		<!--<CALCULATOR.GO VALUE="10 Variables.NodeDisp +" VARNAME="CalcAnswer"/>	
		<SETVAR NAME="NodeDisp" VALUE="Variables.CalcAnswer"/>-->
		<GOTOROW LIST="StateStp" ROWNUM="Variables.StateIndex"/>
		<STRINGLIST NAME="CurStateSteps" STR="StateStp.ITEM" DELIM="%20"/>		
		<LOOP LIST="CurStateSteps" UNTIL="CurStateSteps.ITEM=Variables.stepid"/>
		<IF COND="CurStateSteps.#curRow!=1">
		<THEN>
				<CALCULATOR.GO VALUE="CurStateSteps.#curRow 1 -" VARNAME="roleIncr"/>			
				<CALCULATOR.GO VALUE="Variables.RoleHeight Variables.roleIncr *" VARNAME="RoleHeightIncr"/>	
				<CALCULATOR.GO VALUE="Variables.StartLinkHeight Variables.RoleHeightIncr +" VARNAME="ACLY"/>
				<SETVAR NAME="StartY" VALUE="Variables.ACLY"/>
		</THEN>
		<ELSE>
				<!-- <CALCULATOR.GO VALUE="13 Variables.StartY +" VARNAME="CalcAnswer"/>	 -->
		  	<SETVAR NAME="StartY" VALUE="Variables.StartLinkHeight"/>
		</ELSE>
		</IF>	 
		<!-- <IF COND="Variables.CurrentACL!=Variables.acl">
		<THEN>
			<SETVAR NAME="CurrentACL" VALUE="Variables.acl"/>
						
			<CALCULATOR.GO VALUE="Variables.RoleHeight Variables.ACLY +" VARNAME="CalcAnswer"/>	
			<SETVAR NAME="ACLY" VALUE="Variables.CalcAnswer"/>
			<SETVAR NAME="StartY" VALUE="Variables.ACLY"/>
		</THEN>
		<ELSE>
			
			
			<CALCULATOR.GO VALUE="13 Variables.StartY +" VARNAME="CalcAnswer"/>	
			<SETVAR NAME="StartY" VALUE="Variables.CalcAnswer"/>
		</ELSE>
		</IF>	 -->
	</ELSE>
	</IF>
	<!-- so is the destination state the next one? 	 -->
	<LOOP LIST="State" UNTIL="State.ITEM=Variables.targetstate"/>
	
		
	<CALCULATOR.GO VALUE="State.#curRow 1 -" VARNAME="CalcAnswer"/>	
	<IF COND="Variables.CalcAnswer=Variables.StateIndex">
	<THEN>
	  <!-- <SETVAR NAME="NodeDisp" VALUE="30"/> -->
		<CALCULATOR.GO VALUE="15 Variables.NodeDisp +" VARNAME="CalcAnswer"/>	
		<SETVAR NAME="NodeDisp" VALUE="Variables.CalcAnswer"/>
		<SETVAR NAME="Y2" VALUE="Variables.NodeDisp"/>
	</THEN>
	<ELSE>
	  <CALCULATOR.GO VALUE="10 Variables.NodeDisp +" VARNAME="CalcAnswer"/>	
		<SETVAR NAME="NodeDisp" VALUE="Variables.CalcAnswer"/>
		<SETVAR NAME="Y2" VALUE="Variables.MaxHeight"/>
		
		
		<CALCULATOR.GO VALUE="20 Variables.MaxHeight +" VARNAME="CalcAnswer"/>	
		<SETVAR NAME="MaxHeight" VALUE="Variables.CalcAnswer"/>
	</ELSE>
	</IF>
	<GOTOROW LIST="StatePos" ROWNUM="State.#curRow"/>
		
	
	<CALCULATOR.GO VALUE="StatePos.ITEM 20 -" VARNAME="CalcAnswer"/>	
	<SETVAR NAME="X3" VALUE="Variables.CalcAnswer"/>
	<SETVAR NAME="X4" VALUE="StatePos.ITEM"/>
	<IF COND="Variables.override=Y">
	<THEN>
		<SETVAR NAME="Delta" VALUE="10"/>
	</THEN>
	<ELSE>
		<SETVAR NAME="Delta" VALUE="0"/>	
	</ELSE>
	</IF>
	
	<!-- calculate oval dimensions -->
	<CALCULATOR.GO VALUE="Variables.StartX Variables.NodeDisp +" VARNAME="StartO"/>
	<CALCULATOR.GO VALUE="Variables.StartO Variables.X3 +" VARNAME="CalcAnswer"/>	
	<CALCULATOR.GO VALUE="Variables.CalcAnswer 0.5 *" VARNAME="OvalX"/>	
	<CALCULATOR.GO VALUE="Variables.Y2 5 -" VARNAME="OvalY"/>	
	<CALCULATOR.GO VALUE="Variables.MaxHeight 100 +" VARNAME="StepBoxHeight"/>
	
	<!-- Calculate dimensions of step description rectangles -->
	<CALCULATOR.GO VALUE="Variables.stepActTot Variables.stepCondTot +" VARNAME="stepACTot"/>
	<CALCULATOR.GO VALUE="2 Variables.stepACTot GT" VARNAME="answer"/> 
	<IF COND="Variables.answer=1">
	<THEN>
		<SETVAR NAME="stepACTot" VALUE="2"/>
	</THEN>
	</IF>			
	<CALCULATOR.GO VALUE="Variables.stepACTot 40 *" VARNAME="stepACThisStep"/>
	<CALCULATOR.GO VALUE="Variables.stepACThisStep 90 +" VARNAME="HiddenBoxHeight"/>
	
	<!-- calcutating max height -->
	<CALCULATOR.GO VALUE="Variables.HiddenBoxHeight Variables.MaxHiddenBoxHeight GT" VARNAME="condAns"/> 
	<IF COND="Variables.condAns=1">
	<THEN>
		<SETVAR NAME="MaxHiddenBoxHeight" VALUE="Variables.HiddenBoxHeight"/>
	</THEN>
	</IF>
	
	<!-- assemble step condition string -->
	<setvar NAME="stpCondName" VALUE="Variables.empty"/>
	<if COND="Variables.stepCondTot!=0">
			<then>
				<setcounter NAME="ACTCOUNT" VALUE="0"/>
				<loop FROM="0" COUNT="Variables.stepCondTot">
					<setvar NAME="newtmp" VALUE="Variables.wfp:stepsCounters.STEPconditionsactionCounters.ACTCOUNT"/>
					<WORKFLOWENGINE.GETCONDITIONID ID="Variables.newtmp" OBJVARNAME="actobj"/>
					<WORKFLOWACTION.GETNAME NAME="actobj" VARNAME="stpCName"/>
					<setvar NAME="stpCondName" VALUE="Variables.stpCondName Variables.stpCName"/>
					<inccounter NAME="ACTCOUNT" VALUE="1"/>
				</loop>
			</then>
	</if>
	 
	<!-- assemble step condition string -->
	<setvar NAME="stpActName" VALUE="Variables.empty"/>
	<if COND="Variables.stepActTot!=0">
			<then>
				<setcounter NAME="ACTCOUNT" VALUE="0"/>
				<loop FROM="0" COUNT="Variables.stepActTot">
					<setvar NAME="newtmp" VALUE="Variables.wfp:stepsCounters.STEPactionsactionCounters.ACTCOUNT"/>
					<WORKFLOWENGINE.GETSTEPACTIONID ID="Variables.newtmp" OBJVARNAME="actobj"/>
					<WORKFLOWACTION.GETNAME NAME="actobj" VARNAME="stpAName"/>
					<setvar NAME="stpActName" VALUE="Variables.stpActName Variables.stpAName"/>
					<inccounter NAME="ACTCOUNT" VALUE="1"/>
				</loop>
			</then>
	</if>

 
	<XLAT.LOOKUP KEY="dvin/Common/Step" VARNAME="_STEP"/>
    <XLAT.LOOKUP KEY="dvin/Common/Type" VARNAME="_TYPE"/>
    <XLAT.LOOKUP KEY="dvin/UI/Admin/Actions" VARNAME="_ACTIONS"/>
    <XLAT.LOOKUP KEY="dvin/UI/Admin/Conditions" VARNAME="_CONDITIONS"/>
	<REPLACEALL LIST="Variables.StartX,Variables.StartY,Variables.NodeDisp,Variables.Delta,Variables.Y2,Variables.X3,Variables.X4,Variables.stepname,Variables.stepid,Variables.steptype,Counters.STEP,Variables.OvalX,Variables.OvalY,Variables.StepBoxTop,Variables.HiddenBoxHeight,Variables.stpCondName,Variables.stpActName,Variables._STEP,Variables._TYPE,Variables._ACTIONS,Variables._CONDITIONS">
 		<![CDATA[
 		var wflinkCounters.STEP=new Arrow({StartX:Variables.StartX,StartY:Variables.StartY,NodeDisp:Variables.NodeDisp,Delta:Variables.Delta,Y2:Variables.Y2,X3:Variables.X3,twenty:20,X4:Variables.X4});
 		wflinkCounters.STEP.setId("wflinkCounters.STEP");
 		wflinkCounters.STEP.draw();
		var linkCounters.STEP=new TextBox({left:Variables.StartX,top:Variables.StepBoxTop,width:300,height:Variables.HiddenBoxHeight,color:"#56CBF1"});
		linkCounters.STEP.setText("Variables._STEP : Variables.stepname ");
		linkCounters.STEP.setText("Variables._TYPE : Variables.steptype ");
		linkCounters.STEP.setText("Variables._ACTIONS : Variables.stpActName");
		linkCounters.STEP.setText("Variables._CONDITIONS : Variables.stpCondName");
		linkCounters.STEP.setVisibility(false) ;
		linkCounters.STEP.setId("linkCounters.STEP") ;
		linkCounters.STEP.draw();
		wflinkCounters.STEP.setStepBox(linkCounters.STEP);
		]]>	
	</REPLACEALL>
	
	
			<inccounter NAME="STEP" VALUE="1"/>
			
</LOOP>

<!-- calculating total surface height: StepBoxTop + MaxHiddenBoxHeight + 20 (offset) -->
<CALCULATOR.GO VALUE="Variables.StepBoxTop Variables.MaxHiddenBoxHeight +" VARNAME="TotalSurfaceHeight"/>
<CALCULATOR.GO VALUE="Variables.TotalSurfaceHeight 20 +" VARNAME="TotalSurfaceHeight"/>

<!-- calculating total surface width: MaxWidth + 150(step box width hardcoded) + 100 (offset) -->
<CALCULATOR.GO VALUE="Variables.MaxWidth 450 +" VARNAME="TotalSurfaceWidth"/>

<REPLACEALL LIST="Variables.TotalSurfaceHeight, Variables.TotalSurfaceWidth">
<![CDATA[
	}
	//end of method drawgraph
	
	//initializing dojo gfx surface
	function init() {
		node = dojo.byId("surface");
		var xScale=0.67, yScale=.67, 
		widthTotal=xScale*Variables.TotalSurfaceWidth, 
		heightTotal=yScale*Variables.TotalSurfaceHeight;
		surface = dojox.gfx.createSurface(node, widthTotal, heightTotal);
		group = surface.createGroup();
		group.setTransform({
			xx: xScale,//scaling the image to 2/3 of its original size
			yy: yScale
		});
	}
	
	</script>
]]>
</REPLACEALL>
 
</body>
</html>


</FTCS> 

